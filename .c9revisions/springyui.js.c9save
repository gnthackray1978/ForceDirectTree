{"ts":1360674870650,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\nCopyright (c) 2010 Dennis Hotson\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\n(function () {\n\n\n\n\n    //    jQuery.fn.springy = function (params) {\n    //        \n    //        return this;\n    //    }\n\n\n    jQuery.fn.springy = function (params) {\n        var graph = this.graph = params.graph || new Graph();\n\n        // graph size \n        var graph_width = 2000;\n        var graph_height = 2000;\n\n        //display size\n        var display_width = window.innerWidth + 500;\n        var display_height = window.innerHeight + 500;\n\n        //save screen width/height\n        var screenHeight = screen.height;\n        var screenWidth = screen.width;\n\n        //positional controls\n        var centrePoint = 0;\n        var centreVerticalPoint = 0;\n        var zoomOffset = 0;\n\n        var centrePointXOffset = 0.0;\n        var centrePointYOffset = 0.0;\n\n        var mouse_x = 0;\n        var mouse_y = 0;\n\n        // queue of points to move graph to \n        var mouseQueue = [];\n\n\n\n        var mouseXPercLocat = 0.0;\n        var mouseYPercLocat = 0.0;\n\n        var percX1 = 0.0;\n        var percY1 = 0.0;\n\n\n\n        var stiffness = params.stiffness || 400.0;\n        var repulsion = params.repulsion || 500.0;\n        var damping = params.damping || 0.5;\n        var nodeSelected = params.nodeSelected || null;\n\n        var canvas = this[0];\n        var ctx = canvas.getContext(\"2d\");\n\n\n        var layout = this.layout = new Layout.ForceDirected(graph, stiffness, repulsion, damping);\n\n        // calculate bounding box of graph layout.. with ease-in\n        var currentBB = layout.getBoundingBox();\n        var targetBB = { bottomleft: new Vector(-2, -2), topright: new Vector(2, 2) };\n        var mouseup = true;\n        var _dir = '';\n\n        // auto adjusting bounding box\n        Layout.requestAnimationFrame(function adjust() {\n            targetBB = layout.getBoundingBox();\n            // current gets 20% closer to target every iteration\n            currentBB = {\n                bottomleft: currentBB.bottomleft.add(targetBB.bottomleft.subtract(currentBB.bottomleft)\n    \t\t\t.divide(10)),\n                topright: currentBB.topright.add(targetBB.topright.subtract(currentBB.topright)\n\t\t\t\t.divide(10))\n            };\n\n            while (mouseQueue.length > 0) {\n                var _point = mouseQueue.shift();\n                SetCentrePoint(_point[0], _point[1]);\n            }\n\n            //   if (!mouseup) {\n            var increment = 2;\n            if (_dir == 'SOUTH') {\n                centreVerticalPoint -= increment;\n            }\n            if (_dir == 'NORTH') {\n                centreVerticalPoint += increment;\n            }\n            if (_dir == 'EAST') {\n                centrePoint += increment;\n            }\n            if (_dir == 'WEST') {\n\n                centrePoint -= increment;\n            }\n            if (_dir == 'UP' || _dir == 'DOWN') {\n\n                mouse_x = screenWidth / 2;\n                mouse_y = screenHeight / 2;\n\n                GetPercDistances();\n\n                mouseXPercLocat = percX1;\n                mouseYPercLocat = percY1;\n\n                // zero the centre point \n                SetCentrePoint(1000000, 1000000);\n\n                if (_dir == 'UP') {\n                    graph_width += 50;\n                    graph_height += 50;\n                } else {\n                    graph_width -= 50;\n                    graph_height -= 50;\n                }\n\n                GetPercDistances();\n\n\n                console.log('y zoom ' + percY1 + ' ' + mouseYPercLocat);\n                centreVerticalPoint += (graph_height / 100) * (percY1 - mouseYPercLocat);\n                console.log('x zoom ' + percX1 + ' ' + mouseXPercLocat);\n\n                centrePoint += (graph_width / 100) * (percX1 - mouseXPercLocat);\n            }\n\n            //zoomOffset\n            //   }\n            //    console.log(' state: ' + mouseup + ' ' + centrePoint + ' - ' + centreVerticalPoint);\n\n            Layout.requestAnimationFrame(adjust);\n        });\n\n        // convert to/from screen coordinates\n        toScreen = function (p) {\n            var size = currentBB.topright.subtract(currentBB.bottomleft);\n            var sx = p.subtract(currentBB.bottomleft).divide(size.x).x * graph_width;\n            var sy = p.subtract(currentBB.bottomleft).divide(size.y).y * graph_height;\n            return new Vector(sx, sy);\n        };\n\n        fromScreen = function (s) {\n            var size = currentBB.topright.subtract(currentBB.bottomleft);\n            var px = (s.x / graph_width) * size.x + currentBB.bottomleft.x;\n            var py = (s.y / graph_height) * size.y + currentBB.bottomleft.y;\n            return new Vector(px, py);\n        };\n\n\n\n        // half-assed drag and drop\n        var selected = null;\n        var nearest = null;\n        var dragged = null;\n\n\n\n        jQuery(canvas).mousedown(function (e) {\n\n            console.log('canvas mouse down: ' + centrePoint + ' ' + centreVerticalPoint);\n            jQuery('.actions').hide();\n\n            var pos = jQuery(this).offset();\n\n            mouseup = false;\n\n            var p = fromScreen({ x: (e.pageX - centrePoint) - pos.left, y: (e.pageY - centreVerticalPoint) - pos.top });\n\n\n\n            selected = nearest = dragged = layout.nearest(p);\n\n            if (selected.node !== null) {\n                dragged.point.m = 10000.0;\n\n                if (nodeSelected) {\n                    nodeSelected(selected.node);\n                }\n            }\n\n            renderer.start();\n\n        }).mouseup(function () {\n            mouseup = true;\n            var _point = new Array(1000000, 1000000);\n            mouseQueue[mouseQueue.length] = _point;\n        });\n\n\n\n        $(\".button_box\").mousedown(function (evt) {\n            console.log('button mouse down');\n\n            //mouseup = false;\n\n            if (evt.target.id == \"up\") _dir = 'UP';\n            if (evt.target.id == \"dn\") _dir = 'DOWN';\n            if (evt.target.id == \"we\") _dir = 'WEST';\n            if (evt.target.id == \"no\") _dir = 'NORTH';\n            if (evt.target.id == \"es\") _dir = 'EAST';\n            if (evt.target.id == \"so\") _dir = 'SOUTH';\n            if (evt.target.id == \"de\") _dir = 'DEBUG';\n\n        }).mouseup(function () {\n            //mouseup = true;\n            _dir = '';\n        });\n\n\n        jQuery(canvas).mousemove(function (e) {\n            var pos = jQuery(this).offset();\n            var p = fromScreen({ x: (e.pageX - centrePoint) - pos.left, y: (e.pageY - centreVerticalPoint) - pos.top });\n            var _point = new Array(e.clientX, e.clientY);\n            // SetMouse(_point[0], _point[1]);\n\n            mouse_x = _point[0];\n            mouse_y = _point[1];\n\n            if (!mouseup && selected.node == null) {\n                mouseQueue.push(_point);\n            }\n            nearest = layout.nearest(p);\n\n            if (dragged !== null && dragged.node !== null) {\n                dragged.point.p.x = p.x;\n                dragged.point.p.y = p.y;\n            }\n\n            renderer.start();\n        });\n\n        jQuery(window).bind('mouseup', function (e) {\n            dragged = null;\n        });\n\n        Node.prototype.getWidth = function () {\n            var text = typeof (this.data.label) !== 'undefined' ? this.data.label : this.id;\n            if (this._width && this._width[text])\n                return this._width[text];\n\n            ctx.save();\n            ctx.font = \"16px Verdana, sans-serif\";\n            var width = ctx.measureText(text).width + 10;\n            ctx.restore();\n\n            this._width || (this._width = {});\n            this._width[text] = width;\n\n            return width;\n        };\n\n        Node.prototype.getHeight = function () {\n            return 20;\n        };\n\n        //        SetMouse = function (x, y, mousestate) {\n        //            mouse_x = x;\n        //            mouse_y = y;\n\n        //            if (mousestate == undefined) mousestate = false;\n\n        //            if (mousestate == false)\n        //                document.body.style.cursor = 'default';\n        //            else\n        //                document.body.style.cursor = 'move';\n        //        };\n\n        SetCentrePoint = function (param_x, param_y) {\n            if (param_x == 1000000 && param_y == 1000000) {\n                centrePointXOffset = 0;\n                centrePointYOffset = 0;\n            }\n            else {\n                if (centrePointXOffset === 0) {\n                    centrePointXOffset = centrePoint - param_x;\n                }\n                else {\n\n                    centrePoint = param_x + centrePointXOffset;\n                }\n                if (centrePointYOffset === 0) {\n                    centrePointYOffset = centreVerticalPoint - param_y;\n                }\n                else {\n\n                    centreVerticalPoint = param_y + centrePointYOffset;\n                }\n            }\n        };\n\n        SetZoomStart = function () {\n            GetPercDistances();\n            mouseXPercLocat = percX1;\n            mouseYPercLocat = percY1;\n        };\n\n        GetPercDistances = function () {\n\n\n            var _distanceFromX1 = 0.0;\n            var _distanceFromY1 = 0.0;\n            var _onePercentDistance = 0.0;\n\n            percX1 = 0.0;\n            percY1 = 0.0;\n\n\n\n            //   this.drawingWidth = this.drawingX2 - this.drawingX1;\n            //  this.drawingHeight = this.drawingY2 - this.drawingY1;\n\n\n\n            if (graph_width !== 0 && graph_height !== 0) {\n                if (centrePoint > 0) {\n                    _distanceFromX1 = mouse_x - centrePoint; //;\n                }\n                else {\n                    _distanceFromX1 = Math.abs(centrePoint) + mouse_x;\n                }\n\n                _onePercentDistance = graph_width / 100;\n                percX1 = _distanceFromX1 / _onePercentDistance;\n\n                if (centreVerticalPoint > 0) {\n                    _distanceFromY1 = mouse_y - centreVerticalPoint; // ;                \n                }\n                else {\n                    _distanceFromY1 = Math.abs(centreVerticalPoint) + mouse_y;\n                }\n\n                _onePercentDistance = graph_height / 100;\n                percY1 = _distanceFromY1 / _onePercentDistance;\n\n            }\n\n\n        };\n\n        var renderer = new Renderer(1, layout,\n\t\tfunction clear() {\n\t\t    ctx.clearRect(0, 0, graph_width, graph_height);\n\t\t},\n\t\tfunction drawEdge(edge, p1, p2) {\n\n\n\n\n\n\t\t    var x1 = toScreen(p1).x;\n\t\t    var y1 = toScreen(p1).y;\n\n\t\t    var x2 = toScreen(p2).x;\n\t\t    var y2 = toScreen(p2).y;\n\n\n\n\n\t\t    // var centrePoint = 0;\n\t\t    //  var centreVerticalPoint = 0;\n\n\n\n\n\n\t\t    x1 += centrePoint;\n\t\t    x2 += centrePoint;\n\n\t\t    y1 += centreVerticalPoint;\n\t\t    y2 += centreVerticalPoint;\n\n\n\n\t\t    if (x2 > display_width || x1 > display_width) return;\n\t\t    if (x2 < -500 || x1 < -500) return;\n\n\n\t\t    if (y2 > display_height || y1 > display_height) return;\n\t\t    if (y2 < -500 || y1 < -500) return;\n\n\n\n\t\t    var direction = new Vector(x2 - x1, y2 - y1);\n\t\t    var normal = direction.normal().normalise();\n\n\t\t    var from = graph.getEdges(edge.source, edge.target);\n\t\t    var to = graph.getEdges(edge.target, edge.source);\n\n\t\t    var total = from.length + to.length;\n\n\t\t    // Figure out edge's position in relation to other edges between the same nodes\n\t\t    var n = 0;\n\t\t    for (var i = 0; i < from.length; i++) {\n\t\t        if (from[i].id === edge.id) {\n\t\t            n = i;\n\t\t        }\n\t\t    }\n\n\t\t    var spacing = 6.0;\n\n\t\t    // Figure out how far off center the line should be drawn\n\t\t    var offset = normal.multiply(-((total - 1) * spacing) / 2.0 + (n * spacing));\n\n\t\t    var s1 = toScreen(p1).add(offset);\n\t\t    var s2 = toScreen(p2).add(offset);\n\n\t\t    s1.x += centrePoint;\n\t\t    s1.y += centreVerticalPoint;\n\n\t\t    s2.x += centrePoint;\n\t\t    s2.y += centreVerticalPoint;\n\n\t\t    var boxWidth = edge.target.getWidth();\n\t\t    var boxHeight = edge.target.getHeight();\n\n\t\t    var intersection = intersect_line_box(s1, s2, { x: x2 - boxWidth / 2.0, y: y2 - boxHeight / 2.0 }, boxWidth, boxHeight);\n\n\t\t    if (!intersection) {\n\t\t        intersection = s2;\n\t\t    }\n\n\t\t    var stroke = typeof (edge.data.color) !== 'undefined' ? edge.data.color : '#000000';\n\n\t\t    var arrowWidth;\n\t\t    var arrowLength;\n\n\t\t    var weight = typeof (edge.data.weight) !== 'undefined' ? edge.data.weight : 1.0;\n\n\t\t    ctx.lineWidth = Math.max(weight * 2, 0.1);\n\t\t    arrowWidth = 1 + ctx.lineWidth;\n\t\t    arrowLength = 8;\n\n\t\t    var directional = typeof (edge.data.directional) !== 'undefined' ? edge.data.directional : true;\n\n\t\t    // line\n\t\t    var lineEnd;\n\t\t    if (directional) {\n\t\t        lineEnd = intersection.subtract(direction.normalise().multiply(arrowLength * 0.5));\n\t\t    } else {\n\t\t        lineEnd = s2;\n\t\t    }\n\n\t\t    ctx.strokeStyle = stroke;\n\t\t    ctx.beginPath();\n\t\t    ctx.moveTo(s1.x, s1.y);\n\t\t    ctx.lineTo(lineEnd.x, lineEnd.y);\n\t\t    ctx.stroke();\n\n\t\t    // arrow\n\t\t    if (directional) {\n\t\t        ctx.save();\n\t\t        ctx.fillStyle = stroke;\n\t\t        ctx.translate(intersection.x, intersection.y);\n\t\t        ctx.rotate(Math.atan2(y2 - y1, x2 - x1));\n\t\t        ctx.beginPath();\n\n\t\t        ctx.moveTo(-arrowLength, arrowWidth);\n\n\t\t        ctx.lineTo(0, 0);\n\t\t        ctx.lineTo(-arrowLength, -arrowWidth);\n\t\t        ctx.lineTo(-arrowLength * 0.8, -0);\n\t\t        ctx.closePath();\n\t\t        ctx.fill();\n\t\t        ctx.restore();\n\t\t    }\n\n\t\t    // label\n\t\t    if (typeof (edge.data.label) !== 'undefined') {\n\t\t        text = edge.data.label\n\t\t        ctx.save();\n\t\t        ctx.textAlign = \"center\";\n\t\t        ctx.textBaseline = \"top\";\n\t\t        ctx.font = \"10px Helvetica, sans-serif\";\n\t\t        ctx.fillStyle = \"#5BA6EC\";\n\t\t        ctx.fillText(text, (x1 + x2) / 2, (y1 + y2) / 2);\n\t\t        ctx.restore();\n\t\t    }\n\n\t\t},\n\t\tfunction drawNode(node, p) {\n\t\t    var s = toScreen(p);\n\n\t\t    s.x += centrePoint;\n\t\t    s.y += centreVerticalPoint;\n\n\t\t    var x1 = toScreen(p).x;\n\t\t    var y1 = toScreen(p).y;\n\t\t    var x2 = toScreen(p).x;\n\t\t    var y2 = toScreen(p).y;\n\n\t\t    x1 += centrePoint;\n\t\t    x2 += centrePoint;\n\n\t\t    y1 += centreVerticalPoint;\n\t\t    y2 += centreVerticalPoint;\n\n\t\t    if (x2 > display_width || x1 < 0) return;\n\t\t    if (y2 > display_height || y1 < 0) return;\n\n\n\n\n\t\t    ctx.save();\n\n\t\t    var boxWidth = 20; // node.getWidth();\n\t\t    var boxHeight = 20;// node.getHeight();\n\n\t\t    // clear background\n\t\t    //\t\t    ctx.clearRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    //\t\t    // fill background\n\t\t    //\t\t    if (selected !== null && selected.node !== null && nearest.node !== null && selected.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Red\";\n\t\t    //\t\t    } else if (nearest !== null && nearest.node !== null && nearest.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Green\";\n\t\t    //\t\t    } else {\n\t\t    //\t\t        ctx.fillStyle = \"#FFFFFF\";\n\t\t    //\t\t    }\n\n\n\t\t    //\t\t    ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\t\t    var radgrad = ctx.createRadialGradient(s.x + 2, s.y + 3, 1, s.x + 5, s.y + 5, 5);\n\n\t\t    radgrad.addColorStop(0, '#A7D30C');\n\t\t    radgrad.addColorStop(0.9, '#019F62');\n\t\t    radgrad.addColorStop(1, 'rgba(1,159,98,0)');\n\n\n\n\t\t    ctx.fillStyle = radgrad;\n\t\t    ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    ctx.textAlign = \"left\";\n\t\t    ctx.textBaseline = \"top\";\n\t\t    ctx.font = \"16px Verdana, sans-serif\";\n\t\t    ctx.fillStyle = \"#000000\";\n\t\t    ctx.font = \"16px Verdana, sans-serif\";\n\t\t    var text = typeof (node.data.label) !== 'undefined' ? node.data.label : node.id;\n\t\t    ctx.fillText(text, s.x - boxWidth / 2 + 5, s.y - 8);\n\n\t\t    ctx.restore();\n\t\t}\n\t    );\n\n        renderer.start();\n\n        // helpers for figuring out where to draw arrows\n        function intersect_line_line(p1, p2, p3, p4) {\n            var denom = ((p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y));\n\n            // lines are parallel\n            if (denom === 0) {\n                return false;\n            }\n\n            var ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;\n            var ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;\n\n            if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n                return false;\n            }\n\n            return new Vector(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));\n        }\n\n        function intersect_line_box(p1, p2, p3, w, h) {\n            var tl = { x: p3.x, y: p3.y };\n            var tr = { x: p3.x + w, y: p3.y };\n            var bl = { x: p3.x, y: p3.y + h };\n            var br = { x: p3.x + w, y: p3.y + h };\n\n            var result;\n            if (result = intersect_line_line(p1, p2, tl, tr)) { return result; } // top\n            if (result = intersect_line_line(p1, p2, tr, br)) { return result; } // right\n            if (result = intersect_line_line(p1, p2, br, bl)) { return result; } // bottom\n            if (result = intersect_line_line(p1, p2, bl, tl)) { return result; } // left\n\n            return false;\n        }\n\n        return this;\n    }\n\n\n\n})();\n"]],"start1":0,"start2":0,"length1":0,"length2":18064}]],"length":18064}
{"contributors":[],"silentsave":false,"ts":1360676288079,"patch":[[{"diffs":[[0,"    "],[-1,"//    jQuery.fn.springy = function (params) {\n    //        \n    //        return this;\n    //    }\n\n\n    jQuery.fn.springy = function (params) {\n        var graph = this.graph = params.graph || new Graph();\n\n"],[1,"var mapHandler = function(){\n       "],[0,"    "]],"start1":1081,"start2":1081,"length1":217,"length2":44},{"diffs":[[0,"ze \n        "],[-1,"var "],[1,"this."],[0,"graph_width "]],"start1":1140,"start2":1140,"length1":28,"length2":29},{"diffs":[[0,"        "],[-1,"var "],[1,"this."],[0,"graph_he"]],"start1":1177,"start2":1177,"length1":20,"length2":21},{"diffs":[[0,"ay size\n        "],[-1,"var "],[1,"this."],[0,"display_width = "]],"start1":1227,"start2":1227,"length1":36,"length2":37},{"diffs":[[0,"        "],[-1,"var "],[1,"this."],[0,"display_"]],"start1":1289,"start2":1289,"length1":20,"length2":21},{"diffs":[[0,"ght\n        "],[-1,"var "],[1,"this."],[0,"screenHeight"]],"start1":1377,"start2":1377,"length1":28,"length2":29},{"diffs":[[0,"        "],[-1,"var "],[1,"this."],[0,"screenWi"]],"start1":1424,"start2":1424,"length1":20,"length2":21},{"diffs":[[0,"ontrols\n        "],[-1,"var "],[1,"this."],[0,"centrePoint = 0;"]],"start1":1488,"start2":1488,"length1":36,"length2":37},{"diffs":[[0," 0;\n        "],[-1,"var "],[1,"this."],[0,"centreVertic"]],"start1":1522,"start2":1522,"length1":28,"length2":29},{"diffs":[[0,"        "],[-1,"var "],[1,"this."],[0,"zoomOffs"]],"start1":1564,"start2":1564,"length1":20,"length2":21},{"diffs":[[0,"t = 0;\n\n        "],[-1,"var "],[1,"this."],[0,"centrePointXOffs"]],"start1":1586,"start2":1586,"length1":36,"length2":37},{"diffs":[[0,"        "],[-1,"var "],[1,"this."],[0,"centrePo"]],"start1":1633,"start2":1633,"length1":20,"length2":21},{"diffs":[[0,"0;\n\n        "],[-1,"var "],[1,"this."],[0,"mouse_x = 0;"]],"start1":1669,"start2":1669,"length1":28,"length2":29},{"diffs":[[0," 0;\n        "],[-1,"var "],[1,"this."],[0,"mouse_y = 0;"]],"start1":1695,"start2":1695,"length1":28,"length2":29},{"diffs":[[0,"to \n        "],[-1,"var "],[1,"this."],[0,"mouseQueue ="]],"start1":1767,"start2":1767,"length1":28,"length2":29},{"diffs":[[0," = [];\n\n"],[-1,"\n\n"],[0,"        "],[-1,"var "],[1,"this."],[0,"mouseXPe"]],"start1":1794,"start2":1794,"length1":30,"length2":29},{"diffs":[[0,".0;\n        "],[-1,"var "],[1,"this."],[0,"mouseYPercLo"]],"start1":1834,"start2":1834,"length1":28,"length2":29},{"diffs":[[0,"0;\n\n        "],[-1,"var "],[1,"this."],[0,"percX1 = 0.0"]],"start1":1871,"start2":1871,"length1":28,"length2":29},{"diffs":[[0,"        "],[-1,"var "],[1,"this."],[0,"percY1 ="]],"start1":1902,"start2":1902,"length1":20,"length2":21},{"diffs":[[0,"0.0;"],[-1,"\n\n\n"],[1," \n        "],[0,"\n    "],[1,"};\n"],[0,"    "],[-1,"var stiffness = params.stiffness || 400.0;\n        var repulsion = params.repulsion || 500.0;\n        var damping = params.damping || 0.5;\n        var nodeSelected = params.nodeSelected || null;\n\n        var canvas = this[0];\n        var ctx = canvas.getContext(\"2d\");\n\n\n        var layout = this.layout = new Layout.ForceDirected(graph, stiffness, repulsion, damping);\n\n        // calculate bounding box of graph layout.. with ease-in\n        var currentBB = layout.getBoundingBox();\n        var targetBB = { bottomleft: new Vector(-2, -2), topright: new Vector(2, 2) };\n"],[1,"\n    mapHandler.prototype = {\n        \n        SetCentrePoint:function (param_x, param_y) {\n            if (param_x == 1000000 && param_y == 1000000) {\n                this.centrePointXOffset = 0;\n                this.centrePointYOffset = 0;\n            }\n            else {\n                if (this.centrePointXOffset === 0) {\n                    this.centrePointXOffset = this.centrePoint - param_x;\n                }\n                else {\n\n                    this.centrePoint = param_x + this.centrePointXOffset;\n                }\n                if (this.centrePointYOffset === 0) {\n                    this.centrePointYOffset = this.centreVerticalPoint - param_y;\n                }\n                else {\n\n                    this.centreVerticalPoint = param_y + this.centrePointYOffset;\n                }\n            }\n        },\n        SetZoomStart: function () {\n            this.GetPercDistances();\n            this.mouseXPercLocat = this.percX1;\n            this.mouseYPercLocat = this.percY1;\n        },\n        GetPercDistances: function () {\n\n\n   "],[0,"        "],[1," "],[0,"var "],[-1,"mouseup = true;\n        var _dir = '';\n\n        // auto adjusting bounding box\n        Layout.requestAnimationFrame(function adjust() {\n            targetBB = layout.getBoundingBox();\n            // current gets 20% closer to target every iteration\n            currentBB = {\n                bottomleft: currentBB.bottomleft.add(targetBB.bottomleft.subtract(currentBB.bottomleft)\n    \t\t\t.divide(10)),\n                topright: currentBB.topright.add(targetBB.topright.subtract(currentBB.topright)\n\t\t\t\t.divide(10))\n            };\n\n            while (mouseQueue.length > 0) {\n                var _point = mouseQueue.shift();\n                SetCentrePoint(_point[0], _point[1]);"],[1,"_distanceFromX1 = 0.0;\n            var _distanceFromY1 = 0.0;\n            var _onePercentDistance = 0.0;\n\n            this.percX1 = 0.0;\n            this.percY1 = 0.0;\n\n\n\n            //   this.drawingWidth = this.drawingX2 - this.drawingX1;\n            //  this.drawingHeight = this.drawingY2 - this.drawingY1;\n\n\n\n            if (this.graph_width !== 0 && this.graph_height !== 0) {\n                if (this.centrePoint > 0) {\n                    _distanceFromX1 = this.mouse_x - this.centrePoint; //;\n                }\n                else {\n                    _distanceFromX1 = Math.abs(this.centrePoint) + this.mouse_x;\n                }\n\n                _onePercentDistance = this.graph_width / 100;\n                this.percX1 = _distanceFromX1 / _onePercentDistance;\n\n                if (this.centreVerticalPoint > 0) {\n                    _distanceFromY1 = this.mouse_y - this.centreVerticalPoint; // ;                \n                }\n                else {\n                    _distanceFromY1 = Math.abs(this.centreVerticalPoint) + this.mouse_y;\n                }\n\n                _onePercentDistance = this.graph_height / 100;\n                this.percY1 = _distanceFromY1 / _onePercentDistance;\n"],[0,"\n   "]],"start1":1924,"start2":1924,"length1":1279,"length2":2314},{"diffs":[[0," }\n\n"],[1,"\n"],[0,"        "],[1,"},\n"],[0,"    "],[-1,"//"],[0,"   "],[-1,"if (!mouseup) {"],[1," UpdatePosition:function(_dir){\n            "],[0,"\n   "]],"start1":4246,"start2":4246,"length1":40,"length2":71},{"diffs":[[0,"rement = 2;\n"],[1,"            \n"],[0,"            "]],"start1":4333,"start2":4333,"length1":24,"length2":37},{"diffs":[[0,"                "],[1,"this."],[0,"centreVerticalPo"]],"start1":4393,"start2":4393,"length1":32,"length2":37},{"diffs":[[0,"                "],[1,"this."],[0,"centreVerticalPo"]],"start1":4497,"start2":4497,"length1":32,"length2":37},{"diffs":[[0,"                "],[-1,""],[0,""],[1,"this."],[0,"centrePoint += i"]],"start1":4600,"start2":4600,"length1":32,"length2":37},{"diffs":[[0,"                "],[-1,""],[0,""],[1,"this."],[0,"centrePoint -= i"]],"start1":4696,"start2":4696,"length1":32,"length2":37},{"diffs":[[0,"                "],[1,"this."],[0,"mouse_x = screen"]],"start1":4808,"start2":4808,"length1":32,"length2":37},{"diffs":[[0,"use_x = "],[1,"this."],[0,"screenWi"]],"start1":4831,"start2":4831,"length1":16,"length2":21},{"diffs":[[0,"                "],[1,"this."],[0,"mouse_y = screen"]],"start1":4861,"start2":4861,"length1":32,"length2":37},{"diffs":[[0,"use_y = "],[1,"this."],[0,"screenHe"]],"start1":4884,"start2":4884,"length1":16,"length2":21},{"diffs":[[0,"                "],[1,"this."],[0,"GetPercDistances"]],"start1":4916,"start2":4916,"length1":32,"length2":37},{"diffs":[[0,"                "],[1,"this."],[0,"mouseXPercLocat "]],"start1":4958,"start2":4958,"length1":32,"length2":37},{"diffs":[[0,"useXPercLocat = "],[1,"this."],[0,"percX1;\n        "]],"start1":4981,"start2":4981,"length1":32,"length2":37},{"diffs":[[0,"                "],[1,"this."],[0,"mouseYPercLocat "]],"start1":5010,"start2":5010,"length1":32,"length2":37},{"diffs":[[0,"useYPercLocat = "],[1,"this."],[0,"percY1;\n\n       "]],"start1":5033,"start2":5033,"length1":32,"length2":37},{"diffs":[[0,"                "],[1,"this."],[0,"SetCentrePoint(1"]],"start1":5105,"start2":5105,"length1":32,"length2":37},{"diffs":[[0,"                "],[1,"this."],[0,"graph_width += 5"]],"start1":5201,"start2":5201,"length1":32,"length2":37},{"diffs":[[0,"                "],[1,"this."],[0,"graph_height += "]],"start1":5245,"start2":5245,"length1":32,"length2":37},{"diffs":[[0,"            "],[1,"this."],[0,"graph_width "]],"start1":5319,"start2":5319,"length1":24,"length2":29},{"diffs":[[0,"        "],[1,"this."],[0,"graph_he"]],"start1":5367,"start2":5367,"length1":16,"length2":21},{"diffs":[[0,"                "],[1,"this."],[0,"GetPercDistances"]],"start1":5419,"start2":5419,"length1":32,"length2":37},{"diffs":[[0,"                "],[1,"//"],[0,"console.log('y z"]],"start1":5462,"start2":5462,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"this."],[0,"centreVerticalPo"]],"start1":5537,"start2":5537,"length1":32,"length2":37},{"diffs":[[0,"alPoint += ("],[1,"this."],[0,"graph_height"]],"start1":5570,"start2":5570,"length1":24,"length2":29},{"diffs":[[0,"t / 100) * ("],[1,"this."],[0,"percY1 - mou"]],"start1":5598,"start2":5598,"length1":24,"length2":29},{"diffs":[[0,"is.percY1 - "],[1,"this."],[0,"mouseYPercLo"]],"start1":5612,"start2":5612,"length1":24,"length2":29},{"diffs":[[0,"                "],[1,"//"],[0,"console.log('x z"]],"start1":5647,"start2":5647,"length1":32,"length2":34},{"diffs":[[0,"                "],[1,"this."],[0,"centrePoint += ("]],"start1":5723,"start2":5723,"length1":32,"length2":37},{"diffs":[[0,"int += ("],[1,"this."],[0,"graph_wi"]],"start1":5752,"start2":5752,"length1":16,"length2":21},{"diffs":[[0,"100) * ("],[1,"this."],[0,"percX1 -"]],"start1":5779,"start2":5779,"length1":16,"length2":21},{"diffs":[[0,"ercX1 - "],[1,"this."],[0,"mouseXPe"]],"start1":5793,"start2":5793,"length1":16,"length2":21},{"diffs":[[0,"\n            }\n\n"],[1,"        }\n        \n        \n    };\n    \n\n\n    jQuery.fn.springy = function (params) {\n        var graph = this.graph = params.graph || new Graph();\n\n        // graph size \n//        var graph_width = 2000;\n//        var graph_height = 2000;\n//\n//        //display size\n//        var display_width = window.innerWidth + 500;\n//        var display_height = window.innerHeight + 500;\n//\n//        //save screen width/height\n//        var screenHeight = screen.height;\n//        var screenWidth = screen.width;\n//\n//        //positional controls\n//        var centrePoint = 0;\n//        var centreVerticalPoint = 0;\n//        var zoomOffset = 0;\n//\n//        var centrePointXOffset = 0.0;\n//        var centrePointYOffset = 0.0;\n//\n//        var mouse_x = 0;\n//        var mouse_y = 0;\n//\n//        // queue of points to move graph to \n//        var mouseQueue = [];\n//\n//\n//\n//        var mouseXPercLocat = 0.0;\n//        var mouseYPercLocat = 0.0;\n//\n//        var percX1 = 0.0;\n//        var percY1 = 0.0;\n\n\n\n        var stiffness = params.stiffness || 400.0;\n        var repulsion = params.repulsion || 500.0;\n        var damping = params.damping || 0.5;\n        var nodeSelected = params.nodeSelected || null;\n\n        var canvas = this[0];\n        var ctx = canvas.getContext(\"2d\");\n\n\n        var layout = this.layout = new Layout.ForceDirected(graph, stiffness, repulsion, damping);\n\n        // calculate bounding box of graph layout.. with ease-in\n        var currentBB = layout.getBoundingBox();\n        var targetBB = { bottomleft: new Vector(-2, -2), topright: new Vector(2, 2) };\n        var mouseup = true;\n        var _dir = '';\n\n\n        var fdMapHandler = new mapHandler() ;\n\n        // auto adjusting bounding box\n        Layout.requestAnimationFrame(function adjust() {\n            targetBB = layout.getBoundingBox();\n            // current gets 20% closer to target every iteration\n            currentBB = {\n                bottomleft: currentBB.bottomleft.add(targetBB.bottomleft.subtract(currentBB.bottomleft)\n    \t\t\t.divide(10)),\n                topright: currentBB.topright.add(targetBB.topright.subtract(currentBB.topright)\n\t\t\t\t.divide(10))\n            };\n\n            while (fdMapHandler.mouseQueue.length > 0) {\n                var _point = fdMapHandler.mouseQueue.shift();\n                fdMapHandler.SetCentrePoint(_point[0], _point[1]);\n            }\n\n            //   if (!mouseup) {\n\n"],[0,"            //zo"]],"start1":5823,"start2":5823,"length1":32,"length2":2444},{"diffs":[[0,"  //        };\n\n"],[1,"//"],[0,"        SetCentr"]],"start1":12598,"start2":12598,"length1":32,"length2":34},{"diffs":[[0,"m_x, param_y) {\n"],[1,"//"],[0,"            if ("]],"start1":12655,"start2":12655,"length1":32,"length2":34},{"diffs":[[0,"y == 1000000) {\n"],[1,"//"],[0,"                "]],"start1":12717,"start2":12717,"length1":32,"length2":34},{"diffs":[[0,"intXOffset = 0;\n"],[1,"//"],[0,"                "]],"start1":12759,"start2":12759,"length1":32,"length2":34},{"diffs":[[0,"intYOffset = 0;\n"],[1,"//"],[0,"            }\n  "]],"start1":12801,"start2":12801,"length1":32,"length2":34},{"diffs":[[0,"//            }\n"],[1,"//"],[0,"            else"]],"start1":12817,"start2":12817,"length1":32,"length2":34},{"diffs":[[0,"         else {\n"],[1,"//"],[0,"                "]],"start1":12838,"start2":12838,"length1":32,"length2":34},{"diffs":[[0,"Offset === 0) {\n"],[1,"//"],[0,"                "]],"start1":12888,"start2":12888,"length1":32,"length2":34},{"diffs":[[0,"oint - param_x;\n"],[1,"//"],[0,"                "]],"start1":12954,"start2":12954,"length1":32,"length2":34},{"diffs":[[0,"              }\n"],[1,"//"],[0,"                "]],"start1":12974,"start2":12974,"length1":32,"length2":34},{"diffs":[[0,"         else {\n"],[-1,"\n"],[1,"//\n//"],[0,"                "]],"start1":12999,"start2":12999,"length1":33,"length2":37},{"diffs":[[0,"rePointXOffset;\n"],[1,"//"],[0,"                "]],"start1":13068,"start2":13068,"length1":32,"length2":34},{"diffs":[[0,"              }\n"],[1,"//"],[0,"                "]],"start1":13088,"start2":13088,"length1":32,"length2":34},{"diffs":[[0,"Offset === 0) {\n"],[1,"//"],[0,"                "]],"start1":13138,"start2":13138,"length1":32,"length2":34},{"diffs":[[0,"oint - param_y;\n"],[1,"//"],[0,"                "]],"start1":13212,"start2":13212,"length1":32,"length2":34},{"diffs":[[0,"              }\n"],[1,"//"],[0,"                "]],"start1":13232,"start2":13232,"length1":32,"length2":34},{"diffs":[[0,"         else {\n"],[-1,"\n"],[1,"//\n//"],[0,"                "]],"start1":13257,"start2":13257,"length1":33,"length2":37},{"diffs":[[0,"rePointYOffset;\n"],[1,"//"],[0,"                "]],"start1":13334,"start2":13334,"length1":32,"length2":34},{"diffs":[[0,"              }\n"],[1,"//"],[0,"            }\n  "]],"start1":13354,"start2":13354,"length1":32,"length2":34},{"diffs":[[0,"//            }\n"],[1,"//"],[0,"        };\n\n    "]],"start1":13370,"start2":13370,"length1":32,"length2":34},{"diffs":[[0,"}\n//        };\n\n"],[1,"//"],[0,"        SetZoomS"]],"start1":13384,"start2":13384,"length1":32,"length2":34},{"diffs":[[0,"= function () {\n"],[1,"//"],[0,"            GetP"]],"start1":13423,"start2":13423,"length1":32,"length2":34},{"diffs":[[0,"ercDistances();\n"],[1,"//"],[0,"            mous"]],"start1":13457,"start2":13457,"length1":32,"length2":34},{"diffs":[[0,"Locat = percX1;\n"],[1,"//"],[0,"            mous"]],"start1":13497,"start2":13497,"length1":32,"length2":34},{"diffs":[[0,"Locat = percY1;\n"],[1,"//"],[0,"        };\n\n    "]],"start1":13537,"start2":13537,"length1":32,"length2":34},{"diffs":[[0,"1;\n//        };\n"],[-1,"\n"],[1,"//\n//"],[0,"        GetPercD"]],"start1":13550,"start2":13550,"length1":33,"length2":37},{"diffs":[[0,"= function () {\n"],[-1,"\n\n"],[1,"//\n//\n//"],[0,"            var "]],"start1":13596,"start2":13596,"length1":34,"length2":40},{"diffs":[[0,"ceFromX1 = 0.0;\n"],[1,"//"],[0,"            var "]],"start1":13643,"start2":13643,"length1":32,"length2":34},{"diffs":[[0,"ceFromY1 = 0.0;\n"],[1,"//"],[0,"            var "]],"start1":13684,"start2":13684,"length1":32,"length2":34},{"diffs":[[0,"Distance = 0.0;\n"],[-1,"\n"],[1,"//\n//"],[0,"            perc"]],"start1":13729,"start2":13729,"length1":33,"length2":37},{"diffs":[[0,"  percX1 = 0.0;\n"],[1,"//"],[0,"            perc"]],"start1":13760,"start2":13760,"length1":32,"length2":34},{"diffs":[[0,"  percY1 = 0.0;\n"],[-1,"\n\n\n"],[1,"//\n//\n//\n//"],[0,"            //  "]],"start1":13788,"start2":13788,"length1":35,"length2":43},{"diffs":[[0,"this.drawingX1;\n"],[1,"//"],[0,"            //  "]],"start1":13869,"start2":13869,"length1":32,"length2":34},{"diffs":[[0,"this.drawingY1;\n"],[-1,"\n\n\n"],[1,"//\n//\n//\n//"],[0,"            if ("]],"start1":13941,"start2":13941,"length1":35,"length2":43},{"diffs":[[0,"height !== 0) {\n"],[1,"//"],[0,"                "]],"start1":14011,"start2":14011,"length1":32,"length2":34},{"diffs":[[0,"trePoint > 0) {\n"],[1,"//"],[0,"                "]],"start1":14052,"start2":14052,"length1":32,"length2":34},{"diffs":[[0,"entrePoint; //;\n"],[1,"//"],[0,"                "]],"start1":14119,"start2":14119,"length1":32,"length2":34},{"diffs":[[0,"              }\n"],[1,"//"],[0,"                "]],"start1":14139,"start2":14139,"length1":32,"length2":34},{"diffs":[[0,"         else {\n"],[1,"//"],[0,"                "]],"start1":14164,"start2":14164,"length1":32,"length2":34},{"diffs":[[0,"int) + mouse_x;\n"],[1,"//"],[0,"                "]],"start1":14237,"start2":14237,"length1":32,"length2":34},{"diffs":[[0,"              }\n"],[-1,"\n"],[1,"//\n//"],[0,"                "]],"start1":14257,"start2":14257,"length1":33,"length2":37},{"diffs":[[0,"ph_width / 100;\n"],[1,"//"],[0,"                "]],"start1":14319,"start2":14319,"length1":32,"length2":34},{"diffs":[[0,"ercentDistance;\n"],[-1,"\n"],[1,"//\n//"],[0,"                "]],"start1":14385,"start2":14385,"length1":33,"length2":37},{"diffs":[[0,"calPoint > 0) {\n"],[1,"//"],[0,"                "]],"start1":14437,"start2":14437,"length1":32,"length2":34},{"diffs":[[0,"               \n"],[1,"//"],[0,"                "]],"start1":14529,"start2":14529,"length1":32,"length2":34},{"diffs":[[0,"              }\n"],[1,"//"],[0,"                "]],"start1":14549,"start2":14549,"length1":32,"length2":34},{"diffs":[[0,"         else {\n"],[1,"//"],[0,"                "]],"start1":14574,"start2":14574,"length1":32,"length2":34},{"diffs":[[0,"int) + mouse_y;\n"],[1,"//"],[0,"                "]],"start1":14655,"start2":14655,"length1":32,"length2":34},{"diffs":[[0,"              }\n"],[-1,"\n"],[1,"//\n//"],[0,"                "]],"start1":14675,"start2":14675,"length1":33,"length2":37},{"diffs":[[0,"h_height / 100;\n"],[1,"//"],[0,"                "]],"start1":14738,"start2":14738,"length1":32,"length2":34},{"diffs":[[0,"ercentDistance;\n"],[-1,"\n"],[1,"//\n//"],[0,"            }\n\n\n"]],"start1":14804,"start2":14804,"length1":33,"length2":37},{"diffs":[[0,"//            }\n"],[-1,"\n\n"],[1,"//\n//\n//"],[0,"        };\n\n    "]],"start1":14823,"start2":14823,"length1":34,"length2":40}]],"length":21677,"saved":false}
{"ts":1360676325241,"patch":[[{"diffs":[[0,"    "],[-1,"//   if (!mouseup) {\n\n            //zoomOffset\n            //   }\n            //    console.log(' state: ' + mouseup + ' ' + centrePoint + ' - ' + centreVerticalPoint);\n"],[1,"fdMapHandler.UpdatePosition(_dir);\n       "],[0,"\n   "]],"start1":8225,"start2":8225,"length1":177,"length2":50}]],"length":21550,"saved":false}
{"ts":1360677028438,"patch":[[{"diffs":[[0,"unction("],[-1,"){"],[1,"currentBB){\n        \n        this.currentBB = currentBB;\n        "],[0,"\n       "]],"start1":1103,"start2":1103,"length1":18,"length2":81},{"diffs":[[0,"       \n        "],[1,"toScreen:function (p) {\n            var size = currentBB.topright.subtract(currentBB.bottomleft);\n            var sx = p.subtract(currentBB.bottomleft).divide(size.x).x * graph_width;\n            var sy = p.subtract(currentBB.bottomleft).divide(size.y).y * graph_height;\n            return new Vector(sx, sy);\n        },\n\n        fromScreen:function (s) {\n            var size = currentBB.topright.subtract(currentBB.bottomleft);\n            var px = (s.x / this.graph_width) * size.x + this.currentBB.bottomleft.x;\n            var py = (s.y / this.graph_height) * size.y + this.currentBB.bottomleft.y;\n            return new Vector(px, py);\n        }\n\n"],[0,"\n    };\n    \n\n\n "]],"start1":5913,"start2":5913,"length1":32,"length2":685},{"diffs":[[0,"tes\n"],[-1,"        toScreen = function (p) {\n            var size = currentBB.topright.subtract(currentBB.bottomleft);\n            var sx = p.subtract(currentBB.bottomleft).divide(size.x).x * graph_width;\n            var sy = p.subtract(currentBB.bottomleft).divide(size.y).y * graph_height;\n            return new Vector(sx, sy);\n        };\n\n        fromScreen = function (s) {\n            var size = currentBB.topright.subtract(currentBB.bottomleft);\n            var px = (s.x / graph_width) * size.x + currentBB.bottomleft.x;\n            var py = (s.y / graph_height) * size.y + currentBB.bottomleft.y;\n            return new Vector(px, py);\n        };\n\n"],[0,"\n\n  "]],"start1":9093,"start2":9093,"length1":654,"length2":8},{"diffs":[[0," null;\n\n"],[-1,"\n\n"],[0,"        "]],"start1":9213,"start2":9213,"length1":18,"length2":16},{"diffs":[[0,"os.top });\n\n"],[-1,"\n\n"],[0,"            "]],"start1":9586,"start2":9586,"length1":26,"length2":24},{"diffs":[[0,"] = _point;\n"],[1,""],[0,"        });\n"]],"start1":10051,"start2":10051,"length1":24,"length2":24},{"diffs":[[0,"   });\n\n"],[-1,"\n\n"],[0,"        "]],"start1":10068,"start2":10068,"length1":18,"length2":16}]],"length":21614,"saved":false}
{"ts":1360677229626,"patch":[[{"diffs":[[0,"    }\n\n        }"],[1,","],[0,"\n"],[-1,""],[0,"        \n       "]],"start1":5895,"start2":5895,"length1":33,"length2":34},{"diffs":[[0,"     var size = "],[1,"this."],[0,"currentBB.toprig"]],"start1":5961,"start2":5961,"length1":32,"length2":37},{"diffs":[[0,"pright.subtract("],[1,"this."],[0,"currentBB.bottom"]],"start1":5994,"start2":5994,"length1":32,"length2":37},{"diffs":[[0,"sx = p.subtract("],[1,"this."],[0,"currentBB.bottom"]],"start1":6054,"start2":6054,"length1":32,"length2":37},{"diffs":[[0,".x).x * "],[1,"this."],[0,"graph_wi"]],"start1":6108,"start2":6108,"length1":16,"length2":21},{"diffs":[[0,"sy = p.subtract("],[1,"this."],[0,"currentBB.bottom"]],"start1":6150,"start2":6150,"length1":32,"length2":37},{"diffs":[[0,".y).y * "],[1,"this."],[0,"graph_he"]],"start1":6204,"start2":6204,"length1":16,"length2":21},{"diffs":[[0," size = "],[1,"this."],[0,"currentB"]],"start1":6331,"start2":6331,"length1":16,"length2":21},{"diffs":[[0,"pright.subtract("],[1,"this."],[0,"currentBB.bottom"]],"start1":6356,"start2":6356,"length1":32,"length2":37},{"diffs":[[0,"ttomleft.y;\n"],[-1,""],[0,"            "]],"start1":6561,"start2":6561,"length1":24,"length2":24},{"diffs":[[0,"or(px, py);\n"],[1,"        },\n        currentPosition:function(pos,e){\n             var p = fromScreen({ x: (e.pageX - centrePoint) - pos.left, y: (e.pageY - centreVerticalPoint) - pos.top });\n            \n             return p;\n"],[0,"        }\n\n\n"]],"start1":6600,"start2":6600,"length1":24,"length2":234},{"diffs":[[0,"Handler("],[1,"layout.getBoundingBox()"],[0,") ;\n\n   "]],"start1":8481,"start2":8481,"length1":16,"length2":39}]],"length":21888,"saved":false}
{"ts":1360677523961,"patch":[[{"diffs":[[0,"        var p = "],[1,"this."],[0,"fromScreen({ x: "]],"start1":6669,"start2":6669,"length1":32,"length2":37},{"diffs":[[0,"{ x: (e.pageX - "],[1,"this."],[0,"centrePoint) - p"]],"start1":6701,"start2":6701,"length1":32,"length2":37},{"diffs":[[0,", y: (e.pageY - "],[1,"this."],[0,"centreVerticalPo"]],"start1":6745,"start2":6745,"length1":32,"length2":37},{"diffs":[[0,"t) - pos.top });"],[1,"            "],[0,"\n            \n  "]],"start1":6784,"start2":6784,"length1":32,"length2":44},{"diffs":[[0,"    "],[-1,"\n             return p;"],[1," return p;\n        },\n        addToMouseQueue: function(x,y){            \n            var _point = new Array(x, y);\n            this.mouseQueue[this.mouseQueue.length] = _point;            "],[0,"\n   "]],"start1":6821,"start2":6821,"length1":31,"length2":197},{"diffs":[[0,"    "],[-1,"   console.log('canvas mouse down: ' + centrePoint + ' ' + centreVerticalPoint);"],[0,"\n   "]],"start1":9742,"start2":9742,"length1":88,"length2":8},{"diffs":[[0,"         var p ="],[1,"  fdMapHandler.currentPosition(pos,e);    //"],[0," fromScreen({ x:"]],"start1":9866,"start2":9866,"length1":32,"length2":76},{"diffs":[[0,"ue;\n            "],[1,"\n            fdMapHandler.addToMouseQueue(1000000, 1000000);\n            \n            //"],[0,"var _point = new"]],"start1":10384,"start2":10384,"length1":32,"length2":120},{"diffs":[[0,"0);\n            "],[1,"//"],[0,"mouseQueue[mouse"]],"start1":10526,"start2":10526,"length1":32,"length2":34},{"diffs":[[0,"] = _point;\n"],[1,"            \n            \n"],[0,"        });\n"]],"start1":10572,"start2":10572,"length1":24,"length2":50}]],"length":22161,"saved":false}
{"ts":1360677941014,"patch":[[{"diffs":[[0," currentPosition"],[1,"FromScreen"],[0,":function(pos,e)"]],"start1":6630,"start2":6630,"length1":32,"length2":42},{"diffs":[[0,"n p;\n        },\n"],[1,"        currentPositionToScreen:function(pos,e){\n             var p = this.toScreen({ x: (e.pageX - this.centrePoint) - pos.left, y: (e.pageY - this.centreVerticalPoint) - pos.top });            \n             return p;\n        },\n"],[0,"        addToMou"]],"start1":6841,"start2":6841,"length1":32,"length2":262},{"diffs":[[0,"rentPosition"],[1,"FromScreen"],[0,"(pos,e);    "]],"start1":10140,"start2":10140,"length1":24,"length2":34},{"diffs":[[0,"e(function (e) {"],[-1,""],[0,""],[1,"                    "],[0,"\n            var"]],"start1":11515,"start2":11515,"length1":32,"length2":52},{"diffs":[[0," = f"],[-1,"romScreen({ x: (e.pageX - centrePoint) - pos.left, y: (e.pageY - centreVerticalPoint) - pos.top });\n            var _point = new Array(e.clientX, e.clientY);\n            // SetMouse(_point[0], _point[1]);\n\n            mouse_x = _point[0];\n            mouse_y = _point[1];\n\n            if (!mouseup && selected.node == null) {\n                mouseQueue.push(_point);\n"],[1,"dMapHandler.currentPositionFromScreen(pos,e );    \n\n            if (!mouseup && selected.node === null) {\n                fdMapHandler.addToMouseQueue(e.clientX,e.clientY);                \n            }\n                "],[0,"        "],[-1,"    }"],[0,"\n   "]],"start1":11614,"start2":11614,"length1":388,"length2":235}]],"length":22278,"saved":false}
{"ts":1360678070707,"patch":[[{"diffs":[[0,");\n\n"],[-1,"        // graph size \n//        var graph_width = 2000;\n//        var graph_height = 2000;\n//\n//        //display size\n//        var display_width = window.innerWidth + 500;\n//        var display_height = window.innerHeight + 500;\n//\n//        //save screen width/height\n//        var screenHeight = screen.height;\n//        var screenWidth = screen.width;\n//\n//        //positional controls\n//        var centrePoint = 0;\n//        var centreVerticalPoint = 0;\n//        var zoomOffset = 0;\n//\n//        var centrePointXOffset = 0.0;\n//        var centrePointYOffset = 0.0;\n//\n//        var mouse_x = 0;\n//        var mouse_y = 0;\n//\n//        // queue of points to move graph to \n//        var mouseQueue = [];\n//\n//\n//\n//        var mouseXPercLocat = 0.0;\n//        var mouseYPercLocat = 0.0;\n//\n//        var percX1 = 0.0;\n//        var percY1 = 0.0;\n\n\n\n"],[0,"    "]],"start1":7384,"start2":7384,"length1":867,"length2":8},{"diffs":[[0,"s || 400.0;\n"],[1,""],[0,"        var "]],"start1":7427,"start2":7427,"length1":24,"length2":24},{"diffs":[[0,"on (e) {"],[-1,"\n\n"],[0,"        "]],"start1":9108,"start2":9108,"length1":18,"length2":16},{"diffs":[[0," mouseup = true;"],[-1,"\n"],[0,"            \n   "]],"start1":9760,"start2":9760,"length1":33,"length2":32},{"diffs":[[0,"00);"],[-1,"\n            \n            //var _point = new Array(1000000, 1000000);\n            //mouseQueue[mouseQueue.length] = _point;\n            \n           "],[0," \n  "]],"start1":9844,"start2":9844,"length1":156,"length2":8},{"diffs":[[0,"};\n\n"],[-1,"        //        SetMouse = function (x, y, mousestate) {\n        //            mouse_x = x;\n        //            mouse_y = y;\n\n        //            if (mousestate == undefined) mousestate = false;\n\n        //            if (mousestate == false)\n        //                document.body.style.cursor = 'default';\n        //            else\n        //                document.body.style.cursor = 'move';\n        //        };\n\n//        SetCentrePoint = function (param_x, param_y) {\n//            if (param_x == 1000000 && param_y == 1000000) {\n//                centrePointXOffset = 0;\n//                centrePointYOffset = 0;\n//            }\n//            else {\n//                if (centrePointXOffset === 0) {\n//                    centrePointXOffset = centrePoint - param_x;\n//                }\n//                else {\n//\n//                    centrePoint = param_x + centrePointXOffset;\n//                }\n//                if (centrePointYOffset === 0) {\n//                    centrePointYOffset = centreVerticalPoint - param_y;\n//                }\n//                else {\n//\n//                    centreVerticalPoint = param_y + centrePointYOffset;\n//                }\n//            }\n//        };\n\n//        SetZoomStart = function () {\n//            GetPercDistances();\n//            mouseXPercLocat = percX1;\n//            mouseYPercLocat = percY1;\n//        };\n//\n//        GetPercDistances = function () {\n//\n//\n//            var _distanceFromX1 = 0.0;\n//            var _distanceFromY1 = 0.0;\n//            var _onePercentDistance = 0.0;\n//\n//            percX1 = 0.0;\n//            percY1 = 0.0;\n//\n//\n//\n//            //   this.drawingWidth = this.drawingX2 - this.drawingX1;\n//            //  this.drawingHeight = this.drawingY2 - this.drawingY1;\n//\n//\n//\n//            if (graph_width !== 0 && graph_height !== 0) {\n//                if (centrePoint > 0) {\n//                    _distanceFromX1 = mouse_x - centrePoint; //;\n//                }\n//                else {\n//                    _distanceFromX1 = Math.abs(centrePoint) + mouse_x;\n//                }\n//\n//                _onePercentDistance = graph_width / 100;\n//                percX1 = _distanceFromX1 / _onePercentDistance;\n//\n//                if (centreVerticalPoint > 0) {\n//                    _distanceFromY1 = mouse_y - centreVerticalPoint; // ;                \n//                }\n//                else {\n//                    _distanceFromY1 = Math.abs(centreVerticalPoint) + mouse_y;\n//                }\n//\n//                _onePercentDistance = graph_height / 100;\n//                percY1 = _distanceFromY1 / _onePercentDistance;\n//\n//            }\n//\n//\n//        };\n\n"],[0,"    "]],"start1":11774,"start2":11774,"length1":2680,"length2":8}]],"length":18596,"saved":false}
{"ts":1360678595008,"patch":[[{"diffs":[[0," p2) {\n\n"],[-1,"\n\n\n\n"],[0,"\t\t    va"]],"start1":11934,"start2":11934,"length1":20,"length2":16},{"diffs":[[0,"\n\t\t    var x1 = "],[1,"this.fdMapHandler."],[0,"toScreen(p1).x;\n"]],"start1":11941,"start2":11941,"length1":32,"length2":50},{"diffs":[[0,"creen(p1).x;"],[1,"            "],[0,"\n\t\t    var y"]],"start1":11978,"start2":11978,"length1":24,"length2":36},{"diffs":[[0,"\n\t\t    var y1 = "],[1,"this.fdMapHandler."],[0,"toScreen(p1).y;\n"]],"start1":12002,"start2":12002,"length1":32,"length2":50},{"diffs":[[0,"reen(p1).y;\n"],[-1,"\n"],[0,"\t\t    var x2"]],"start1":12040,"start2":12040,"length1":25,"length2":24},{"diffs":[[0,"\n\t\t    var x2 = "],[1,"this.fdMapHandler."],[0,"toScreen(p2).x;\n"]],"start1":12051,"start2":12051,"length1":32,"length2":50},{"diffs":[[0,"\n\t\t    var y2 = "],[1,"this.fdMapHandler."],[0,"toScreen(p2).y;\n"]],"start1":12100,"start2":12100,"length1":32,"length2":50},{"diffs":[[0,"y;\n\n"],[-1,"\n\n\n"],[0,"\t\t    "],[-1,"// var centrePoint = 0;\n\t\t    //  var centreVerticalPoint = 0;\n\n\n\n\n"],[1,"x1 += this.fdMapHandler.centrePoint;"],[0,"\n\t\t    x"],[-1,"1"],[1,"2"],[0," += "],[-1,"centrePoint;\n\t\t    x2 += "],[1,"this.fdMapHandler."],[0,"cent"]],"start1":12147,"start2":12147,"length1":122,"length2":81},{"diffs":[[0,"er.centrePoint;\n"],[-1,"\n"],[0,"\t\t    y1 += cent"]],"start1":12221,"start2":12221,"length1":33,"length2":32},{"diffs":[[0,"nt;\n\t\t    y1 += "],[1,"this.fdMapHandler."],[0,"centreVerticalPo"]],"start1":12233,"start2":12233,"length1":32,"length2":50},{"diffs":[[0,"nt;\n\t\t    y2 += "],[1,"this.fdMapHandler."],[0,"centreVerticalPo"]],"start1":12284,"start2":12284,"length1":32,"length2":50},{"diffs":[[0,"Point;\n\n"],[-1,"\n\n"],[0,"\t\t    if"]],"start1":12332,"start2":12332,"length1":18,"length2":16},{"diffs":[[0,"\n\t\t    if (x2 > "],[1,"this.fdMapHandler."],[0,"display_width ||"]],"start1":12339,"start2":12339,"length1":32,"length2":50},{"diffs":[[0,"dth || x1 > "],[1,"this.fdMapHandler."],[0,"display_widt"]],"start1":12383,"start2":12383,"length1":24,"length2":42},{"diffs":[[0,"return;\n"],[-1,"\n\n"],[0,"\t\t    if"]],"start1":12470,"start2":12470,"length1":18,"length2":16},{"diffs":[[0,"\n\t\t    if (y2 > "],[1,"this.fdMapHandler."],[0,"display_height |"]],"start1":12477,"start2":12477,"length1":32,"length2":50},{"diffs":[[0,"|| y1 > "],[1,"this.fdMapHandler."],[0,"display_"]],"start1":12526,"start2":12526,"length1":16,"length2":34},{"diffs":[[0,"   var s1 = "],[1,"this.fdMapHandler."],[0,"toScreen(p1)"]],"start1":13295,"start2":13295,"length1":24,"length2":42},{"diffs":[[0,"   var s2 = "],[1,"this.fdMapHandler."],[0,"toScreen(p2)"]],"start1":13354,"start2":13354,"length1":24,"length2":42},{"diffs":[[0,"    s1.x += "],[1,"this.fdMapHandler."],[0,"centrePoint;"]],"start1":13413,"start2":13413,"length1":24,"length2":42},{"diffs":[[0,"    s1.y += "],[1,"this.fdMapHandler."],[0,"centreVertic"]],"start1":13458,"start2":13458,"length1":24,"length2":42},{"diffs":[[0,"    s2.x += "],[1,"this.fdMapHandler."],[0,"centrePoint;"]],"start1":13512,"start2":13512,"length1":24,"length2":42},{"diffs":[[0,"    s2.y += "],[1,"this.fdMapHandler."],[0,"centreVertic"]],"start1":13557,"start2":13557,"length1":24,"length2":42}]],"length":18845,"saved":false}
{"ts":1360679269365,"patch":[[{"diffs":[[0,"n () {\n\n"],[1,"    var Vector;"],[0,"\n\n\n    v"]],"start1":1070,"start2":1070,"length1":16,"length2":31},{"diffs":[[0,"urrentBB"],[1,", graph"],[0,"){\n     "]],"start1":1127,"start2":1127,"length1":16,"length2":23},{"diffs":[[0,"raph){\n        \n"],[1,"        this.graph =graph;\n"],[0,"        this.cur"]],"start1":1138,"start2":1138,"length1":32,"length2":59},{"diffs":[[0,"; \n        \n"],[1,"        this.canvas = this[0];\n        this.ctx = canvas.getContext(\"2d\");\n        \n"],[0,"    };\n    \n"]],"start1":2039,"start2":2039,"length1":24,"length2":108},{"diffs":[[0,"  \n        }"],[-1,""],[0,""],[1,",\n        intersect_line_line: function(p1, p2, p3, p4) {\n            var denom = ((p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y));\n\n            // lines are parallel\n            if (denom === 0) {\n                return false;\n            }\n\n            var ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;\n            var ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;\n\n            if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n                return false;\n            }\n\n            return new Vector(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));\n        },\n\n        intersect_line_box: function(p1, p2, p3, w, h) {\n            var tl = { x: p3.x, y: p3.y };\n            var tr = { x: p3.x + w, y: p3.y };\n            var bl = { x: p3.x, y: p3.y + h };\n            var br = { x: p3.x + w, y: p3.y + h };\n\n            var result;\n            if (result = this.intersect_line_line(p1, p2, tl, tr)) { return result; } // top\n            if (result = this.intersect_line_line(p1, p2, tr, br)) { return result; } // right\n            if (result = this.intersect_line_line(p1, p2, br, bl)) { return result; } // bottom\n            if (result = this.intersect_line_line(p1, p2, bl, tl)) { return result; } // left\n\n            return false;\n        },\n\n        drawEdge: function(edge, p1, p2) {\n\n    \t    var x1 = this.toScreen(p1).x;            \n\t\t    var y1 = this.toScreen(p1).y;\n\t\t    var x2 = this.toScreen(p2).x;\n\t\t    var y2 = this.toScreen(p2).y;\n\n\t\t    x1 += this.centrePoint;\n\t\t    x2 += this.centrePoint;\n\t\t    y1 += this.centreVerticalPoint;\n\t\t    y2 += this.centreVerticalPoint;\n\n\t\t    if (x2 > this.display_width || x1 > this.display_width) return;\n\t\t    if (x2 < -500 || x1 < -500) return;\n\t\t    if (y2 > this.display_height || y1 > this.display_height) return;\n\t\t    if (y2 < -500 || y1 < -500) return;\n\n\n\n\t\t    var direction = new Vector(x2 - x1, y2 - y1);\n\t\t    var normal = direction.normal().normalise();\n\n\t\t    var from = this.graph.getEdges(edge.source, edge.target);\n\t\t    var to = this.graph.getEdges(edge.target, edge.source);\n\n\t\t    var total = from.length + to.length;\n\n\t\t    // Figure out edge's position in relation to other edges between the same nodes\n\t\t    var n = 0;\n\t\t    for (var i = 0; i < from.length; i++) {\n\t\t        if (from[i].id === edge.id) {\n\t\t            n = i;\n\t\t        }\n\t\t    }\n\n\t\t    var spacing = 6.0;\n\n\t\t    // Figure out how far off center the line should be drawn\n\t\t    var offset = normal.multiply(-((total - 1) * spacing) / 2.0 + (n * spacing));\n\n\t\t    var s1 = this.toScreen(p1).add(offset);\n\t\t    var s2 = this.toScreen(p2).add(offset);\n\n\t\t    s1.x += this.centrePoint;\n\t\t    s1.y += this.centreVerticalPoint;\n\n\t\t    s2.x += this.centrePoint;\n\t\t    s2.y += this.centreVerticalPoint;\n\n\t\t    var boxWidth = edge.target.getWidth();\n\t\t    var boxHeight = edge.target.getHeight();\n\n\t\t    var intersection = this.intersect_line_box(s1, s2, { x: x2 - boxWidth / 2.0, y: y2 - boxHeight / 2.0 }, boxWidth, boxHeight);\n\n\t\t    if (!intersection) {\n\t\t        intersection = s2;\n\t\t    }\n\n            var stroke = typeof (edge.data.color) !== 'undefined' ? edge.data.color : '#000000';\n\n\t\t    var arrowWidth;\n\t\t    var arrowLength;\n\n\t\t    var weight = typeof (edge.data.weight) !== 'undefined' ? edge.data.weight : 1.0;\n\n\t\t    this.ctx.lineWidth = Math.max(weight * 2, 0.1);\n\t\t    arrowWidth = 1 + this.ctx.lineWidth;\n\t\t    arrowLength = 8;\n\n\t\t    var directional = typeof (edge.data.directional) !== 'undefined' ? edge.data.directional : true;\n\n\t\t    // line\n\t\t    var lineEnd;\n\t\t    if (directional) {\n\t\t        lineEnd = intersection.subtract(direction.normalise().multiply(arrowLength * 0.5));\n\t\t    } else {\n\t\t        lineEnd = s2;\n\t\t    }\n\n\t\t    this.ctx.strokeStyle = stroke;\n\t\t    this.ctx.beginPath();\n\t\t    this.ctx.moveTo(s1.x, s1.y);\n\t\t    this.ctx.lineTo(lineEnd.x, lineEnd.y);\n\t\t    this.ctx.stroke();\n\n\t\t    // arrow\n\t\t    if (directional) {\n\t\t        this.ctx.save();\n\t\t        this.ctx.fillStyle = stroke;\n\t\t        this.ctx.translate(intersection.x, intersection.y);\n\t\t        this.ctx.rotate(Math.atan2(y2 - y1, x2 - x1));\n\t\t        this.ctx.beginPath();\n\n\t\t        this.ctx.moveTo(-arrowLength, arrowWidth);\n\n\t\t        this.ctx.lineTo(0, 0);\n\t\t        this.ctx.lineTo(-arrowLength, -arrowWidth);\n\t\t        this.ctx.lineTo(-arrowLength * 0.8, -0);\n\t\t        this.ctx.closePath();\n\t\t        this.ctx.fill();\n\t\t        this.ctx.restore();\n\t\t    }\n\n\t\t    // label\n\t\t    if (typeof (edge.data.label) !== 'undefined') {\n\t\t        text = edge.data.label\n\t\t        this.ctx.save();\n\t\t        this.ctx.textAlign = \"center\";\n\t\t        this.ctx.textBaseline = \"top\";\n\t\t        this.ctx.font = \"10px Helvetica, sans-serif\";\n\t\t        this.ctx.fillStyle = \"#5BA6EC\";\n\t\t        this.ctx.fillText(text, (x1 + x2) / 2, (y1 + y2) / 2);\n\t\t        this.ctx.restore();\n\t\t    }\n\n\t\t}"],[0,"\n\n\n    };\n  "]],"start1":7385,"start2":7385,"length1":24,"length2":4929},{"diffs":[[0,"    "],[-1,"var canvas = this[0];\n        var ctx = canvas.getContext(\"2d\");"],[0,""],[1,""],[0,"\n\n\n "]],"start1":12634,"start2":12634,"length1":72,"length2":8},{"diffs":[[0,"ingBox()"],[-1,""],[0,""],[1,",graph"],[0,") ;\n\n   "]],"start1":13052,"start2":13052,"length1":16,"length2":22},{"diffs":[[0," = s2;\n\t\t    }\n\n"],[-1,"\t\t"],[1,"        "],[0,"    var stroke ="]],"start1":18859,"start2":18859,"length1":34,"length2":40},{"diffs":[[0,"    "],[-1,"  function intersect_line_line(p1, p2, p3, p4) {\n            var denom = ((p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y));\n\n            // lines are parallel\n            if (denom === 0) {\n                return false;\n            }\n\n            var ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;\n            var ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;\n\n            if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n                return false;\n            }\n\n            return new Vector(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));\n        }\n\n        function intersect_line_box(p1, p2, p3, w, h) {\n            var tl = { x: p3.x, y: p3.y };\n            var tr = { x: p3.x + w, y: p3.y };\n            var bl = { x: p3.x, y: p3.y + h };\n            var br = { x: p3.x + w, y: p3.y + h };\n\n            var result;\n            if (result = intersect_line_line(p1, p2, tl, tr)) { return result; } // top\n            if (result = intersect_line_line(p1, p2, tr, br)) { return result; } // right\n            if (result = intersect_line_line(p1, p2, br, bl)) { return result; } // bottom\n            if (result = intersect_line_line(p1, p2, bl, tl)) { return result; } // left\n\n            return false;\n        }\n"],[0,""],[1,""],[0,"\n   "]],"start1":22491,"start2":22491,"length1":1307,"length2":8}]],"length":22532,"saved":false}
{"ts":1360679464750,"patch":[[{"diffs":[[0,"d') {\n\t\t        "],[1,"var "],[0,"text = edge.data"]],"start1":11949,"start2":11949,"length1":32,"length2":36},{"diffs":[[0,"edge.data.label\n"],[-1,""],[0,"\t\t        this.c"]],"start1":11976,"start2":11976,"length1":32,"length2":32},{"diffs":[[0,"  }\n\n\t\t}"],[-1,"\n"],[1,",\n        \n        function drawNode(node, p) {\n    \t   \n           var s = this.toScreen(p);\n\n\t\t    s.x += this.centrePoint;\n\t\t    s.y += this.centreVerticalPoint;\n\n\t\t    var x1 = this.toScreen(p).x;\n\t\t    var y1 = this.toScreen(p).y;\n\t\t    var x2 = this.toScreen(p).x;\n\t\t    var y2 = this.toScreen(p).y;\n\n\t\t    x1 += this.centrePoint;\n\t\t    x2 += this.centrePoint;\n\n\t\t    y1 += this.centreVerticalPoint;\n\t\t    y2 += this.centreVerticalPoint;\n\n\t\t    if (x2 > this.display_width || x1 < 0) return;\n\t\t    if (y2 > this.display_height || y1 < 0) return;\n\n\n\n\n\t\t    ctx.save();\n\n\t\t    var boxWidth = 20; // node.getWidth();\n\t\t    var boxHeight = 20;// node.getHeight();\n\n\t\t    // clear background\n\t\t    //\t\t    ctx.clearRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    //\t\t    // fill background\n\t\t    //\t\t    if (selected !== null && selected.node !== null && nearest.node !== null && selected.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Red\";\n\t\t    //\t\t    } else if (nearest !== null && nearest.node !== null && nearest.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Green\";\n\t\t    //\t\t    } else {\n\t\t    //\t\t        ctx.fillStyle = \"#FFFFFF\";\n\t\t    //\t\t    }\n\n\n\t\t    //\t\t    ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\t\t    var radgrad = this.ctx.createRadialGradient(s.x + 2, s.y + 3, 1, s.x + 5, s.y + 5, 5);\n\n\t\t    radgrad.addColorStop(0, '#A7D30C');\n\t\t    radgrad.addColorStop(0.9, '#019F62');\n\t\t    radgrad.addColorStop(1, 'rgba(1,159,98,0)');\n\n\n\n\t\t    this.ctx.fillStyle = radgrad;\n\t\t    this.ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    this.ctx.textAlign = \"left\";\n\t\t    this.ctx.textBaseline = \"top\";\n\t\t    this.ctx.font = \"16px Verdana, sans-serif\";\n\t\t    this.ctx.fillStyle = \"#000000\";\n\t\t    this.ctx.font = \"16px Verdana, sans-serif\";\n\t\t    var text = typeof (node.data.label) !== 'undefined' ? node.data.label : node.id;\n\t\t    this.ctx.fillText(text, s.x - boxWidth / 2 + 5, s.y - 8);\n\n\t\t    this.ctx.restore();\n\t\t}"],[0,"\n\n    };"]],"start1":12298,"start2":12298,"length1":17,"length2":2018}]],"length":24537,"saved":false}
{"ts":1360679531769,"patch":[[{"diffs":[[0,"        "],[-1,"function"],[0," drawNod"]],"start1":12317,"start2":12317,"length1":24,"length2":16},{"diffs":[[0,"        drawNode"],[1,": function"],[0,"(node, p) {\n    "]],"start1":12318,"start2":12318,"length1":32,"length2":42},{"diffs":[[0,"turn;\n\n\n\n\n\t\t    "],[1,"this."],[0,"ctx.save();\n\n\t\t "]],"start1":12854,"start2":12854,"length1":32,"length2":37}]],"length":24544,"saved":false}
{"ts":1360679587940,"patch":[[{"diffs":[[0,"   \n        "],[-1," "],[0,"drawNode: fu"]],"start1":12313,"start2":12313,"length1":25,"length2":24},{"diffs":[[0,".restore();\n"],[1,"\t\t},\n        clear:function () {\n    \t    this.ctx.clearRect(0, 0, graph_width, graph_height);\n"],[0,"\t\t}\n\n    };\n"]],"start1":14299,"start2":14299,"length1":24,"length2":119}]],"length":24638,"saved":false}
{"ts":1360679601182,"patch":[[{"diffs":[[0,"clearRect(0, 0, "],[1,"this."],[0,"graph_width, gra"]],"start1":14362,"start2":14362,"length1":32,"length2":37},{"diffs":[[0,"is.graph_width, "],[1,"this."],[0,"graph_height);\n\t"]],"start1":14380,"start2":14380,"length1":32,"length2":37}]],"length":24648,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360679851453,"patch":[[{"diffs":[[0,"s.ctx = "],[1,"this."],[0,"canvas.g"]],"start1":2093,"start2":2093,"length1":16,"length2":21},{"diffs":[[0,"out,"],[-1,"\n\t\tfunction clear() {\n\t\t    ctx.clearRect(0, 0, graph_width, graph_height);\n\t\t},\n\t\tfunction drawEdge(edge, p1, p2) {\n\n\t\t    var x1 = this.fdMapHandler.toScreen(p1).x;            \n\t\t    var y1 = this.fdMapHandler.toScreen(p1).y;\n\t\t    var x2 = this.fdMapHandler.toScreen(p2).x;\n\t\t    var y2 = this.fdMapHandler.toScreen(p2).y;\n\n\t\t    x1 += this.fdMapHandler.centrePoint;\n\t\t    x2 += this.fdMapHandler.centrePoint;\n\t\t    y1 += this.fdMapHandler.centreVerticalPoint;\n\t\t    y2 += this.fdMapHandler.centreVerticalPoint;\n\n\t\t    if (x2 > this.fdMapHandler.display_width || x1 > this.fdMapHandler.display_width) return;\n\t\t    if (x2 < -500 || x1 < -500) return;\n\t\t    if (y2 > this.fdMapHandler.display_height || y1 > this.fdMapHandler.display_height) return;\n\t\t    if (y2 < -500 || y1 < -500) return;\n\n\n\n\t\t    var direction = new Vector(x2 - x1, y2 - y1);\n\t\t    var normal = direction.normal().normalise();\n\n\t\t    var from = graph.getEdges(edge.source, edge.target);\n\t\t    var to = graph.getEdges(edge.target, edge.source);\n\n\t\t    var total = from.length + to.length;\n\n\t\t    // Figure out edge's position in relation to other edges between the same nodes\n\t\t    var n = 0;\n\t\t    for (var i = 0; i < from.length; i++) {\n\t\t        if (from[i].id === edge.id) {\n\t\t            n = i;\n\t\t        }\n\t\t    }\n\n\t\t    var spacing = 6.0;\n\n\t\t    // Figure out how far off center the line should be drawn\n\t\t    var offset = normal.multiply(-((total - 1) * spacing) / 2.0 + (n * spacing));\n\n\t\t    var s1 = this.fdMapHandler.toScreen(p1).add(offset);\n\t\t    var s2 = this.fdMapHandler.toScreen(p2).add(offset);\n\n\t\t    s1.x += this.fdMapHandler.centrePoint;\n\t\t    s1.y += this.fdMapHandler.centreVerticalPoint;\n\n\t\t    s2.x += this.fdMapHandler.centrePoint;\n\t\t    s2.y += this.fdMapHandler.centreVerticalPoint;\n\n\t\t    var boxWidth = edge.target.getWidth();\n\t\t    var boxHeight = edge.target.getHeight();\n\n\t\t    var intersection = intersect_line_box(s1, s2, { x: x2 - boxWidth / 2.0, y: y2 - boxHeight / 2.0 }, boxWidth, boxHeight);\n\n\t\t    if (!intersection) {\n\t\t        intersection = s2;\n\t\t    }\n\n            var stroke = typeof (edge.data.color) !== 'undefined' ? edge.data.color : '#000000';\n\n\t\t    var arrowWidth;\n\t\t    var arrowLength;\n\n\t\t    var weight = typeof (edge.data.weight) !== 'undefined' ? edge.data.weight : 1.0;\n\n\t\t    ctx.lineWidth = Math.max(weight * 2, 0.1);\n\t\t    arrowWidth = 1 + ctx.lineWidth;\n\t\t    arrowLength = 8;\n\n\t\t    var directional = typeof (edge.data.directional) !== 'undefined' ? edge.data.directional : true;\n\n\t\t    // line\n\t\t    var lineEnd;\n\t\t    if (directional) {\n\t\t        lineEnd = intersection.subtract(direction.normalise().multiply(arrowLength * 0.5));\n\t\t    } else {\n\t\t        lineEnd = s2;\n\t\t    }\n\n\t\t    ctx.strokeStyle = stroke;\n\t\t    ctx.beginPath();\n\t\t    ctx.moveTo(s1.x, s1.y);\n\t\t    ctx.lineTo(lineEnd.x, lineEnd.y);\n\t\t    ctx.stroke();\n\n\t\t    // arrow\n\t\t    if (directional) {\n\t\t        ctx.save();\n\t\t        ctx.fillStyle = stroke;\n\t\t        ctx.translate(intersection.x, intersection.y);\n\t\t        ctx.rotate(Math.atan2(y2 - y1, x2 - x1));\n\t\t        ctx.beginPath();\n\n\t\t        ctx.moveTo(-arrowLength, arrowWidth);\n\n\t\t        ctx.lineTo(0, 0);\n\t\t        ctx.lineTo(-arrowLength, -arrowWidth);\n\t\t        ctx.lineTo(-arrowLength * 0.8, -0);\n\t\t        ctx.closePath();\n\t\t        ctx.fill();\n\t\t        ctx.restore();\n\t\t    }\n\n\t\t    // label\n\t\t    if (typeof (edge.data.label) !== 'undefined') {\n\t\t        text = edge.data.label\n\t\t        ctx.save();\n\t\t        ctx.textAlign = \"center\";\n\t\t        ctx.textBaseline = \"top\";\n\t\t        ctx.font = \"10px Helvetica, sans-serif\";\n\t\t        ctx.fillStyle = \"#5BA6EC\";\n\t\t        ctx.fillText(text, (x1 + x2) / 2, (y1 + y2) / 2);\n\t\t        ctx.restore();\n\t\t    }\n\n\t\t},\n\t\tfunction drawNode(node, p) {\n\t\t    var s = toScreen(p);\n\n\t\t    s.x += centrePoint;\n\t\t    s.y += centreVerticalPoint;\n\n\t\t    var x1 = toScreen(p).x;\n\t\t    var y1 = toScreen(p).y;\n\t\t    var x2 = toScreen(p).x;\n\t\t    var y2 = toScreen(p).y;\n\n\t\t    x1 += centrePoint;\n\t\t    x2 += centrePoint;\n\n\t\t    y1 += centreVerticalPoint;\n\t\t    y2 += centreVerticalPoint;\n\n\t\t    if (x2 > display_width || x1 < 0) return;\n\t\t    if (y2 > display_height || y1 < 0) return;\n\n\n\n\n\t\t    ctx.save();\n\n\t\t    var boxWidth = 20; // node.getWidth();\n\t\t    var boxHeight = 20;// node.getHeight();\n\n\t\t    // clear background\n\t\t    //\t\t    ctx.clearRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    //\t\t    // fill background\n\t\t    //\t\t    if (selected !== null && selected.node !== null && nearest.node !== null && selected.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Red\";\n\t\t    //\t\t    } else if (nearest !== null && nearest.node !== null && nearest.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Green\";\n\t\t    //\t\t    } else {\n\t\t    //\t\t        ctx.fillStyle = \"#FFFFFF\";\n\t\t    //\t\t    }\n\n\n\t\t    //\t\t    ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\t\t    var radgrad = ctx.createRadialGradient(s.x + 2, s.y + 3, 1, s.x + 5, s.y + 5, 5);\n\n\t\t    radgrad.addColorStop(0, '#A7D30C');\n\t\t    radgrad.addColorStop(0.9, '#019F62');\n\t\t    radgrad.addColorStop(1, 'rgba(1,159,98,0)');\n\n\n\n\t\t    ctx.fillStyle = radgrad;\n\t\t    ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    ctx.textAlign = \"left\";\n\t\t    ctx.textBaseline = \"top\";\n\t\t    ctx.font = \"16px Verdana, sans-serif\";\n\t\t    ctx.fillStyle = \"#000000\";\n\t\t    ctx.font = \"16px Verdana, sans-serif\";\n\t\t    var text = typeof (node.data.label) !== 'undefined' ? node.data.label : node.id;\n\t\t    ctx.fillText(text, s.x - boxWidth / 2 + 5, s.y - 8);\n\n\t\t    ctx.restore();\n\t\t}\n\t    "],[1,"fdMapHandler.clear,fdMapHandler.drawEdge,fdMapHandler.drawNode"],[0,");\n\n"]],"start1":18921,"start2":18921,"length1":5605,"length2":70}]],"length":19118,"saved":false}
{"ts":1360679864596,"patch":[[{"diffs":[[0,"r Vector"],[1,",Renderer,Layout"],[0,";\n\n\n    "]],"start1":1084,"start2":1084,"length1":16,"length2":32}]],"length":19134,"saved":false}
{"ts":1360679906940,"patch":[[{"diffs":[[0,"\n        jQuery("],[1,"fdMapHandler."],[0,"canvas).mousedow"]],"start1":16185,"start2":16185,"length1":32,"length2":45},{"diffs":[[0," jQuery("],[1,"fdMapHandler."],[0,"canvas)."]],"start1":17611,"start2":17611,"length1":16,"length2":29},{"diffs":[[0,"            "],[1,"fdMapHandler."],[0,"ctx.save();\n"]],"start1":18551,"start2":18551,"length1":24,"length2":37},{"diffs":[[0,"            "],[1,"fdMapHandler."],[0,"ctx.font = \""]],"start1":18588,"start2":18588,"length1":24,"length2":37},{"diffs":[[0,"width = "],[1,"fdMapHandler."],[0,"ctx.meas"]],"start1":18668,"start2":18668,"length1":16,"length2":29},{"diffs":[[0,"            "],[1,"fdMapHandler."],[0,"ctx.restore("]],"start1":18723,"start2":18723,"length1":24,"length2":37}]],"length":19212,"saved":false}
{"ts":1360679971319,"patch":[[{"diffs":[[0,"r,Layout"],[1,",Graph"],[0,";\n\n\n    "]],"start1":1100,"start2":1100,"length1":16,"length2":22}]],"length":19218,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360764187968,"patch":[[{"diffs":[[0,"h;\n\n"],[-1,"\n    var mapHandler = function(currentBB, graph){\n        \n        this.graph =graph;\n        this.currentBB = currentBB;\n        \n               // graph size \n        this.graph_width = 2000;\n        this.graph_height = 2000;\n\n        //display size\n        this.display_width = window.innerWidth + 500;\n        this.display_height = window.innerHeight + 500;\n\n        //save screen width/height\n        this.screenHeight = screen.height;\n        this.screenWidth = screen.width;\n\n        //positional controls\n        this.centrePoint = 0;\n        this.centreVerticalPoint = 0;\n        this.zoomOffset = 0;\n\n        this.centrePointXOffset = 0.0;\n        this.centrePointYOffset = 0.0;\n\n        this.mouse_x = 0;\n        this.mouse_y = 0;\n\n        // queue of points to move graph to \n        this.mouseQueue = [];\n\n        this.mouseXPercLocat = 0.0;\n        this.mouseYPercLocat = 0.0;\n\n        this.percX1 = 0.0;\n        this.percY1 = 0.0; \n        \n        this.canvas = this[0];\n        this.ctx = this.canvas.getContext(\"2d\");\n        \n    };\n    \n    mapHandler.prototype = {\n        \n        SetCentrePoint:function (param_x, param_y) {\n            if (param_x == 1000000 && param_y == 1000000) {\n                this.centrePointXOffset = 0;\n                this.centrePointYOffset = 0;\n            }\n            else {\n                if (this.centrePointXOffset === 0) {\n                    this.centrePointXOffset = this.centrePoint - param_x;\n                }\n                else {\n\n                    this.centrePoint = param_x + this.centrePointXOffset;\n                }\n                if (this.centrePointYOffset === 0) {\n                    this.centrePointYOffset = this.centreVerticalPoint - param_y;\n                }\n                else {\n\n                    this.centreVerticalPoint = param_y + this.centrePointYOffset;\n                }\n            }\n        },\n        SetZoomStart: function () {\n            this.GetPercDistances();\n            this.mouseXPercLocat = this.percX1;\n            this.mouseYPercLocat = this.percY1;\n        },\n        GetPercDistances: function () {\n\n\n            var _distanceFromX1 = 0.0;\n            var _distanceFromY1 = 0.0;\n            var _onePercentDistance = 0.0;\n\n            this.percX1 = 0.0;\n            this.percY1 = 0.0;\n\n\n\n            //   this.drawingWidth = this.drawingX2 - this.drawingX1;\n            //  this.drawingHeight = this.drawingY2 - this.drawingY1;\n\n\n\n            if (this.graph_width !== 0 && this.graph_height !== 0) {\n                if (this.centrePoint > 0) {\n                    _distanceFromX1 = this.mouse_x - this.centrePoint; //;\n                }\n                else {\n                    _distanceFromX1 = Math.abs(this.centrePoint) + this.mouse_x;\n                }\n\n                _onePercentDistance = this.graph_width / 100;\n                this.percX1 = _distanceFromX1 / _onePercentDistance;\n\n                if (this.centreVerticalPoint > 0) {\n                    _distanceFromY1 = this.mouse_y - this.centreVerticalPoint; // ;                \n                }\n                else {\n                    _distanceFromY1 = Math.abs(this.centreVerticalPoint) + this.mouse_y;\n                }\n\n                _onePercentDistance = this.graph_height / 100;\n                this.percY1 = _distanceFromY1 / _onePercentDistance;\n\n            }\n\n\n        },\n        UpdatePosition:function(_dir){\n            \n            var increment = 2;\n            \n            if (_dir == 'SOUTH') {\n                this.centreVerticalPoint -= increment;\n            }\n            if (_dir == 'NORTH') {\n                this.centreVerticalPoint += increment;\n            }\n            if (_dir == 'EAST') {\n                this.centrePoint += increment;\n            }\n            if (_dir == 'WEST') {\n\n                this.centrePoint -= increment;\n            }\n            if (_dir == 'UP' || _dir == 'DOWN') {\n\n                this.mouse_x = this.screenWidth / 2;\n                this.mouse_y = this.screenHeight / 2;\n\n                this.GetPercDistances();\n\n                this.mouseXPercLocat = this.percX1;\n                this.mouseYPercLocat = this.percY1;\n\n                // zero the centre point \n                this.SetCentrePoint(1000000, 1000000);\n\n                if (_dir == 'UP') {\n                    this.graph_width += 50;\n                    this.graph_height += 50;\n                } else {\n                    this.graph_width -= 50;\n                    this.graph_height -= 50;\n                }\n\n                this.GetPercDistances();\n\n\n                //console.log('y zoom ' + percY1 + ' ' + mouseYPercLocat);\n                this.centreVerticalPoint += (this.graph_height / 100) * (this.percY1 - this.mouseYPercLocat);\n                //console.log('x zoom ' + percX1 + ' ' + mouseXPercLocat);\n\n                this.centrePoint += (this.graph_width / 100) * (this.percX1 - this.mouseXPercLocat);\n            }\n\n        },\n        \n        toScreen:function (p) {\n            var size = this.currentBB.topright.subtract(this.currentBB.bottomleft);\n            var sx = p.subtract(this.currentBB.bottomleft).divide(size.x).x * this.graph_width;\n            var sy = p.subtract(this.currentBB.bottomleft).divide(size.y).y * this.graph_height;\n            return new Vector(sx, sy);\n        },\n\n        fromScreen:function (s) {\n            var size = this.currentBB.topright.subtract(this.currentBB.bottomleft);\n            var px = (s.x / this.graph_width) * size.x + this.currentBB.bottomleft.x;\n            var py = (s.y / this.graph_height) * size.y + this.currentBB.bottomleft.y;\n            return new Vector(px, py);\n        },\n        currentPositionFromScreen:function(pos,e){\n             var p = this.fromScreen({ x: (e.pageX - this.centrePoint) - pos.left, y: (e.pageY - this.centreVerticalPoint) - pos.top });            \n             return p;\n        },\n        currentPositionToScreen:function(pos,e){\n             var p = this.toScreen({ x: (e.pageX - this.centrePoint) - pos.left, y: (e.pageY - this.centreVerticalPoint) - pos.top });            \n             return p;\n        },\n        addToMouseQueue: function(x,y){            \n            var _point = new Array(x, y);\n            this.mouseQueue[this.mouseQueue.length] = _point;            \n        },\n        intersect_line_line: function(p1, p2, p3, p4) {\n            var denom = ((p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y));\n\n            // lines are parallel\n            if (denom === 0) {\n                return false;\n            }\n\n            var ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denom;\n            var ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denom;\n\n            if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n                return false;\n            }\n\n            return new Vector(p1.x + ua * (p2.x - p1.x), p1.y + ua * (p2.y - p1.y));\n        },\n\n        intersect_line_box: function(p1, p2, p3, w, h) {\n            var tl = { x: p3.x, y: p3.y };\n            var tr = { x: p3.x + w, y: p3.y };\n            var bl = { x: p3.x, y: p3.y + h };\n            var br = { x: p3.x + w, y: p3.y + h };\n\n            var result;\n            if (result = this.intersect_line_line(p1, p2, tl, tr)) { return result; } // top\n            if (result = this.intersect_line_line(p1, p2, tr, br)) { return result; } // right\n            if (result = this.intersect_line_line(p1, p2, br, bl)) { return result; } // bottom\n            if (result = this.intersect_line_line(p1, p2, bl, tl)) { return result; } // left\n\n            return false;\n        },"],[1," \n    \n    mapHandler.prototype = {\n        \n \n "],[0,"\n\n  "]],"start1":1113,"start2":1113,"length1":7645,"length2":56},{"diffs":[[0,"ll;\n"],[-1,"\n"],[0,"    "],[-1,"    \n\n"],[0,"\n   "]],"start1":7179,"start2":7179,"length1":19,"length2":12},{"diffs":[[0,"dge,"],[-1,"fdMapHandler.drawNode"],[1,"\n        \n        \n        drawEdge(map, edge, p1, p2) {\n\n            var _utils = new Utils(currentBB)\n            \n            var x1 = map.mapOffset(_utils.toScreen(p1).x;            \n\t\t    var y1 = map.mapOffset(_utils.toScreen(p1).y;\n            \n\t\t    var x2 = map.mapOffset(_utils.toScreen(p2).x;\n\t\t    var y2 = map.mapOffset(_utils.toScreen(p2).y;\n\n\n            if(!map.validToDraw(x1,y1)) return;\n            if(!map.validToDraw(x2,y2)) return;\n\n         \n\t\t    var direction = new Vector(x2 - x1, y2 - y1);\n\t\t    var normal = direction.normal().normalise();\n\n\t\t    var from = this.graph.getEdges(edge.source, edge.target);\n\t\t    var to = this.graph.getEdges(edge.target, edge.source);\n\n\t\t    var total = from.length + to.length;\n\n\t\t    // Figure out edge's position in relation to other edges between the same nodes\n\t\t    var n = 0;\n\t\t    for (var i = 0; i < from.length; i++) {\n\t\t        if (from[i].id === edge.id) {\n\t\t            n = i;\n\t\t        }\n\t\t    }\n\n\t\t    var spacing = 6.0;\n\n\t\t    // Figure out how far off center the line should be drawn\n\t\t    var offset = normal.multiply(-((total - 1) * spacing) / 2.0 + (n * spacing));\n\n\n\n\t\t    var s1 = map.mapOffset(_utils.toScreen(p1).add(offset));            \n\t\t    var s2 = map.mapOffset(_utils.toScreen(p2).add(offset));\n\n\n\t\t    var boxWidth = edge.target.getWidth();\n\t\t    var boxHeight = edge.target.getHeight();\n\n\t\t    var intersection = this.intersect_line_box(s1, s2, { x: x2 - boxWidth / 2.0, y: y2 - boxHeight / 2.0 }, boxWidth, boxHeight);\n\n\t\t    if (!intersection) {\n\t\t        intersection = s2;\n\t\t    }\n\n            var stroke = typeof (edge.data.color) !== 'undefined' ? edge.data.color : '#000000';\n\n\t\t    var arrowWidth;\n\t\t    var arrowLength;\n\n\t\t    var weight = typeof (edge.data.weight) !== 'undefined' ? edge.data.weight : 1.0;\n\n\t\t    this.ctx.lineWidth = Math.max(weight * 2, 0.1);\n\t\t    arrowWidth = 1 + this.ctx.lineWidth;\n\t\t    arrowLength = 8;\n\n\t\t    var directional = typeof (edge.data.directional) !== 'undefined' ? edge.data.directional : true;\n\n\t\t    // line\n\t\t    var lineEnd;\n\t\t    if (directional) {\n\t\t        lineEnd = intersection.subtract(direction.normalise().multiply(arrowLength * 0.5));\n\t\t    } else {\n\t\t        lineEnd = s2;\n\t\t    }\n\n\t\t    this.ctx.strokeStyle = stroke;\n\t\t    this.ctx.beginPath();\n\t\t    this.ctx.moveTo(s1.x, s1.y);\n\t\t    this.ctx.lineTo(lineEnd.x, lineEnd.y);\n\t\t    this.ctx.stroke();\n\n\t\t    // arrow\n\t\t    if (directional) {\n\t\t        this.ctx.save();\n\t\t        this.ctx.fillStyle = stroke;\n\t\t        this.ctx.translate(intersection.x, intersection.y);\n\t\t        this.ctx.rotate(Math.atan2(y2 - y1, x2 - x1));\n\t\t        this.ctx.beginPath();\n\n\t\t        this.ctx.moveTo(-arrowLength, arrowWidth);\n\n\t\t        this.ctx.lineTo(0, 0);\n\t\t        this.ctx.lineTo(-arrowLength, -arrowWidth);\n\t\t        this.ctx.lineTo(-arrowLength * 0.8, -0);\n\t\t        this.ctx.closePath();\n\t\t        this.ctx.fill();\n\t\t        this.ctx.restore();\n\t\t    }\n\n\t\t    // label\n\t\t    if (typeof (edge.data.label) !== 'undefined') {\n\t\t        var text = edge.data.label\n\t\t        this.ctx.save();\n\t\t        this.ctx.textAlign = \"center\";\n\t\t        this.ctx.textBaseline = \"top\";\n\t\t        this.ctx.font = \"10px Helvetica, sans-serif\";\n\t\t        this.ctx.fillStyle = \"#5BA6EC\";\n\t\t        this.ctx.fillText(text, (x1 + x2) / 2, (y1 + y2) / 2);\n\t\t        this.ctx.restore();\n\t\t    }\n\n\t\t}\n        \n        "],[0,");\n\n"]],"start1":11466,"start2":11466,"length1":29,"length2":3401},{"diffs":[[0,"derer.start();\n\n"],[1,"\n\n\n\n\n"],[0,"        // helpe"]],"start1":14878,"start2":14878,"length1":32,"length2":37}]],"length":14999,"saved":false}
{"ts":1360764356193,"patch":[[{"diffs":[[0,"\n \n\n"],[-1,"        drawEdge: function(edge, p1, p2) {\n\n    \t    var x1 = this.toScreen(p1).x;            \n\t\t    var y1 = this.toScreen(p1).y;\n\t\t    var x2 = this.toScreen(p2).x;\n\t\t    var y2 = this.toScreen(p2).y;\n\n\t\t    x1 += this.centrePoint;\n\t\t    x2 += this.centrePoint;\n\t\t    y1 += this.centreVerticalPoint;\n\t\t    y2 += this.centreVerticalPoint;\n\n\t\t    if (x2 > this.display_width || x1 > this.display_width) return;\n\t\t    if (x2 < -500 || x1 < -500) return;\n\t\t    if (y2 > this.display_height || y1 > this.display_height) return;\n\t\t    if (y2 < -500 || y1 < -500) return;\n\n\n\n\t\t    var direction = new Vector(x2 - x1, y2 - y1);\n\t\t    var normal = direction.normal().normalise();\n\n\t\t    var from = this.graph.getEdges(edge.source, edge.target);\n\t\t    var to = this.graph.getEdges(edge.target, edge.source);\n\n\t\t    var total = from.length + to.length;\n\n\t\t    // Figure out edge's position in relation to other edges between the same nodes\n\t\t    var n = 0;\n\t\t    for (var i = 0; i < from.length; i++) {\n\t\t        if (from[i].id === edge.id) {\n\t\t            n = i;\n\t\t        }\n\t\t    }\n\n\t\t    var spacing = 6.0;\n\n\t\t    // Figure out how far off center the line should be drawn\n\t\t    var offset = normal.multiply(-((total - 1) * spacing) / 2.0 + (n * spacing));\n\n\t\t    var s1 = this.toScreen(p1).add(offset);\n\t\t    var s2 = this.toScreen(p2).add(offset);\n\n\t\t    s1.x += this.centrePoint;\n\t\t    s1.y += this.centreVerticalPoint;\n\n\t\t    s2.x += this.centrePoint;\n\t\t    s2.y += this.centreVerticalPoint;\n\n\t\t    var boxWidth = edge.target.getWidth();\n\t\t    var boxHeight = edge.target.getHeight();\n\n\t\t    var intersection = this.intersect_line_box(s1, s2, { x: x2 - boxWidth / 2.0, y: y2 - boxHeight / 2.0 }, boxWidth, boxHeight);\n\n\t\t    if (!intersection) {\n\t\t        intersection = s2;\n\t\t    }\n\n            var stroke = typeof (edge.data.color) !== 'undefined' ? edge.data.color : '#000000';\n\n\t\t    var arrowWidth;\n\t\t    var arrowLength;\n\n\t\t    var weight = typeof (edge.data.weight) !== 'undefined' ? edge.data.weight : 1.0;\n\n\t\t    this.ctx.lineWidth = Math.max(weight * 2, 0.1);\n\t\t    arrowWidth = 1 + this.ctx.lineWidth;\n\t\t    arrowLength = 8;\n\n\t\t    var directional = typeof (edge.data.directional) !== 'undefined' ? edge.data.directional : true;\n\n\t\t    // line\n\t\t    var lineEnd;\n\t\t    if (directional) {\n\t\t        lineEnd = intersection.subtract(direction.normalise().multiply(arrowLength * 0.5));\n\t\t    } else {\n\t\t        lineEnd = s2;\n\t\t    }\n\n\t\t    this.ctx.strokeStyle = stroke;\n\t\t    this.ctx.beginPath();\n\t\t    this.ctx.moveTo(s1.x, s1.y);\n\t\t    this.ctx.lineTo(lineEnd.x, lineEnd.y);\n\t\t    this.ctx.stroke();\n\n\t\t    // arrow\n\t\t    if (directional) {\n\t\t        this.ctx.save();\n\t\t        this.ctx.fillStyle = stroke;\n\t\t        this.ctx.translate(intersection.x, intersection.y);\n\t\t        this.ctx.rotate(Math.atan2(y2 - y1, x2 - x1));\n\t\t        this.ctx.beginPath();\n\n\t\t        this.ctx.moveTo(-arrowLength, arrowWidth);\n\n\t\t        this.ctx.lineTo(0, 0);\n\t\t        this.ctx.lineTo(-arrowLength, -arrowWidth);\n\t\t        this.ctx.lineTo(-arrowLength * 0.8, -0);\n\t\t        this.ctx.closePath();\n\t\t        this.ctx.fill();\n\t\t        this.ctx.restore();\n\t\t    }\n\n\t\t    // label\n\t\t    if (typeof (edge.data.label) !== 'undefined') {\n\t\t        var text = edge.data.label\n\t\t        this.ctx.save();\n\t\t        this.ctx.textAlign = \"center\";\n\t\t        this.ctx.textBaseline = \"top\";\n\t\t        this.ctx.font = \"10px Helvetica, sans-serif\";\n\t\t        this.ctx.fillStyle = \"#5BA6EC\";\n\t\t        this.ctx.fillText(text, (x1 + x2) / 2, (y1 + y2) / 2);\n\t\t        this.ctx.restore();\n\t\t    }\n\n\t\t},"],[0,"\n   "]],"start1":1163,"start2":1163,"length1":3586,"length2":8},{"diffs":[[0,"ear,"],[-1,"fdMapHandler.drawEdge,\n        \n        \n        drawEdge"],[1,"\n        \n            function(node, p) {\n           \n            var s = this.toScreen(p);\n\n\t\t    s.x += this.centrePoint;\n\t\t    s.y += this.centreVerticalPoint;\n\n\t\t    var x1 = this.toScreen(p).x;\n\t\t    var y1 = this.toScreen(p).y;\n\t\t    var x2 = this.toScreen(p).x;\n\t\t    var y2 = this.toScreen(p).y;\n\n\t\t    x1 += this.centrePoint;\n\t\t    x2 += this.centrePoint;\n\n\t\t    y1 += this.centreVerticalPoint;\n\t\t    y2 += this.centreVerticalPoint;\n\n\t\t    if (x2 > this.display_width || x1 < 0) return;\n\t\t    if (y2 > this.display_height || y1 < 0) return;\n\n\n\n\n\t\t    this.ctx.save();\n\n\t\t    var boxWidth = 20; // node.getWidth();\n\t\t    var boxHeight = 20;// node.getHeight();\n\n\t\t    // clear background\n\t\t    //\t\t    ctx.clearRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    //\t\t    // fill background\n\t\t    //\t\t    if (selected !== null && selected.node !== null && nearest.node !== null && selected.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Red\";\n\t\t    //\t\t    } else if (nearest !== null && nearest.node !== null && nearest.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Green\";\n\t\t    //\t\t    } else {\n\t\t    //\t\t        ctx.fillStyle = \"#FFFFFF\";\n\t\t    //\t\t    }\n\n\n\t\t    //\t\t    ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\t\t    var radgrad = this.ctx.createRadialGradient(s.x + 2, s.y + 3, 1, s.x + 5, s.y + 5, 5);\n\n\t\t    radgrad.addColorStop(0, '#A7D30C');\n\t\t    radgrad.addColorStop(0.9, '#019F62');\n\t\t    radgrad.addColorStop(1, 'rgba(1,159,98,0)');\n\n\n\n\t\t    this.ctx.fillStyle = radgrad;\n\t\t    this.ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    this.ctx.textAlign = \"left\";\n\t\t    this.ctx.textBaseline = \"top\";\n\t\t    this.ctx.font = \"16px Verdana, sans-serif\";\n\t\t    this.ctx.fillStyle = \"#000000\";\n\t\t    this.ctx.font = \"16px Verdana, sans-serif\";\n\t\t    var text = typeof (node.data.label) !== 'undefined' ? node.data.label : node.id;\n\t\t    this.ctx.fillText(text, s.x - boxWidth / 2 + 5, s.y - 8);\n\n\t\t    this.ctx.restore();\n\t\t},        \n        function"],[0,"(map"]],"start1":7866,"start2":7866,"length1":65,"length2":2039},{"diffs":[[0,"reen(p1)"],[1,")"],[0,".x;     "]],"start1":10029,"start2":10029,"length1":16,"length2":17},{"diffs":[[0,"reen(p1)"],[1,")"],[0,".y;\n    "]],"start1":10094,"start2":10094,"length1":16,"length2":17},{"diffs":[[0,"reen(p2)"],[1,")"],[0,".x;\n\t\t  "]],"start1":10160,"start2":10160,"length1":16,"length2":17},{"diffs":[[0,"reen(p2)"],[1,")"],[0,".y;\n\n\n  "]],"start1":10213,"start2":10213,"length1":16,"length2":17},{"diffs":[[0,"1.0;\n\n\t\t    "],[-1,"this."],[0,"ctx.lineWidt"]],"start1":11675,"start2":11675,"length1":29,"length2":24},{"diffs":[[0,"h = 1 + "],[-1,"this."],[0,"ctx.line"]],"start1":11745,"start2":11745,"length1":21,"length2":16},{"diffs":[[0,"   }\n\n\t\t    "],[-1,"this."],[0,"ctx.strokeSt"]],"start1":12090,"start2":12090,"length1":29,"length2":24},{"diffs":[[0,"roke;\n\t\t    "],[-1,"this."],[0,"ctx.beginPat"]],"start1":12122,"start2":12122,"length1":29,"length2":24},{"diffs":[[0,"th();\n\t\t    "],[-1,"this."],[0,"ctx.moveTo(s"]],"start1":12145,"start2":12145,"length1":29,"length2":24},{"diffs":[[0,"1.y);\n\t\t    "],[-1,"this."],[0,"ctx.lineTo(l"]],"start1":12175,"start2":12175,"length1":29,"length2":24},{"diffs":[[0,"d.y);\n\t\t    "],[-1,"this."],[0,"ctx.stroke()"]],"start1":12215,"start2":12215,"length1":29,"length2":24}]],"length":13364,"saved":false}
{"ts":1360775042886,"patch":[[{"diffs":[[0,"VerticalPoint;\n\n"],[1,"//"],[0,"\t\t    var x1 = t"]],"start1":8018,"start2":8018,"length1":32,"length2":34},{"diffs":[[0,".toScreen(p).x;\n"],[1,"//"],[0,"\t\t    var y1 = t"]],"start1":8055,"start2":8055,"length1":32,"length2":34},{"diffs":[[0,".toScreen(p).y;\n"],[1,"//"],[0,"\t\t    var x2 = t"]],"start1":8092,"start2":8092,"length1":32,"length2":34},{"diffs":[[0,".toScreen(p).x;\n"],[1,"//"],[0,"\t\t    var y2 = t"]],"start1":8129,"start2":8129,"length1":32,"length2":34},{"diffs":[[0,".toScreen(p).y;\n"],[-1,"\n"],[1,"//\n//"],[0,"\t\t    x1 += this"]],"start1":8166,"start2":8166,"length1":33,"length2":37},{"diffs":[[0,"is.centrePoint;\n"],[1,"//"],[0,"\t\t    x2 += this"]],"start1":8201,"start2":8201,"length1":32,"length2":34},{"diffs":[[0,"is.centrePoint;\n"],[-1,"\n"],[1,"//\n//"],[0,"\t\t    y1 += this"]],"start1":8233,"start2":8233,"length1":33,"length2":37},{"diffs":[[0,"eVerticalPoint;\n"],[1,"//"],[0,"\t\t    y2 += this"]],"start1":8276,"start2":8276,"length1":32,"length2":34},{"diffs":[[0,"eVerticalPoint;\n"],[-1,"\n"],[1,"//\n//"],[0,"\t\t    if (x2 > t"]],"start1":8316,"start2":8316,"length1":33,"length2":37},{"diffs":[[0,"x1 < 0) return;\n"],[1,"//"],[0,"\t\t    if (y2 > t"]],"start1":8374,"start2":8374,"length1":32,"length2":34},{"diffs":[[0,"1 < 0) return;\n\n"],[1,"\n"],[1,"            var _utils = new Utils(currentBB);\n            \n            var x1 = map.mapOffset(_utils.toScreen(p1)).x;            \n    \t    var y1 = map.mapOffset(_utils.toScreen(p1)).y;\n            \n            if(!map.validToDraw(x1,y1)) return;\n       "],[0,"\n\n\n\t\t    this.ct"]],"start1":8431,"start2":8431,"length1":32,"length2":288},{"diffs":[[0,"rrentBB)"],[1,";"],[0,"\n       "]],"start1":10243,"start2":10243,"length1":16,"length2":17}]],"length":13647,"saved":false}
{"ts":1360775160994,"patch":[[{"diffs":[[0,") {\n"],[-1,"           \n            var s = this.toScreen(p);\n\n\t\t    s.x += this.centrePoint;\n\t\t    s.y += this.centreVerticalPoint;\n\n//\t\t    var x1 = this.toScreen(p).x;\n//\t\t    var y1 = this.toScreen(p).y;\n//\t\t    var x2 = this.toScreen(p).x;\n//\t\t    var y2 = this.toScreen(p).y;\n//\n//\t\t    x1 += this.centrePoint;\n//\t\t    x2 += this.centrePoint;\n//\n//\t\t    y1 += this.centreVerticalPoint;\n//\t\t    y2 += this.centreVerticalPoint;\n//\n//\t\t    if (x2 > this.display_width || x1 < 0) return;\n//\t\t    if (y2 > this.display_height || y1 < 0) return;\n\n"],[0,"\n   "]],"start1":7908,"start2":7908,"length1":543,"length2":8},{"diffs":[[0,"       \n"],[1,"            var s = map.mapOffset(_utils.toScreen(p));"],[0,"\n\n\t\t    "]],"start1":8161,"start2":8161,"length1":16,"length2":70}]],"length":13166,"saved":false}
{"ts":1360776168499,"patch":[[{"diffs":[[0,"\n\n \n"],[-1,"    \n    mapHandler.prototype = {\n        \n \n \n\n\n        \n        drawNode: function(node, p) {\n    \t   \n           var s = this.toScreen(p);\n\n\t\t    s.x += this.centrePoint;\n\t\t    s.y += this.centreVerticalPoint;\n\n\t\t    var x1 = this.toScreen(p).x;\n\t\t    var y1 = this.toScreen(p).y;\n\t\t    var x2 = this.toScreen(p).x;\n\t\t    var y2 = this.toScreen(p).y;\n\n\t\t    x1 += this.centrePoint;\n\t\t    x2 += this.centrePoint;\n\n\t\t    y1 += this.centreVerticalPoint;\n\t\t    y2 += this.centreVerticalPoint;\n\n\t\t    if (x2 > this.display_width || x1 < 0) return;\n\t\t    if (y2 > this.display_height || y1 < 0) return;\n\n\n\n\n\t\t    this.ctx.save();\n\n\t\t    var boxWidth = 20; // node.getWidth();\n\t\t    var boxHeight = 20;// node.getHeight();\n\n\t\t    // clear background\n\t\t    //\t\t    ctx.clearRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    //\t\t    // fill background\n\t\t    //\t\t    if (selected !== null && selected.node !== null && nearest.node !== null && selected.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Red\";\n\t\t    //\t\t    } else if (nearest !== null && nearest.node !== null && nearest.node.id === node.id) {\n\t\t    //\t\t        ctx.fillStyle = \"Green\";\n\t\t    //\t\t    } else {\n\t\t    //\t\t        ctx.fillStyle = \"#FFFFFF\";\n\t\t    //\t\t    }\n\n\n\t\t    //\t\t    ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\t\t    var radgrad = this.ctx.createRadialGradient(s.x + 2, s.y + 3, 1, s.x + 5, s.y + 5, 5);\n\n\t\t    radgrad.addColorStop(0, '#A7D30C');\n\t\t    radgrad.addColorStop(0.9, '#019F62');\n\t\t    radgrad.addColorStop(1, 'rgba(1,159,98,0)');\n\n\n\n\t\t    this.ctx.fillStyle = radgrad;\n\t\t    this.ctx.fillRect(s.x - boxWidth / 2, s.y - 10, boxWidth, 20);\n\n\n\n\t\t    this.ctx.textAlign = \"left\";\n\t\t    this.ctx.textBaseline = \"top\";\n\t\t    this.ctx.font = \"16px Verdana, sans-serif\";\n\t\t    this.ctx.fillStyle = \"#000000\";\n\t\t    this.ctx.font = \"16px Verdana, sans-serif\";\n\t\t    var text = typeof (node.data.label) !== 'undefined' ? node.data.label : node.id;\n\t\t    this.ctx.fillText(text, s.x - boxWidth / 2 + 5, s.y - 8);\n\n\t\t    this.ctx.restore();\n\t\t},\n        clear:function () {\n    \t    this.ctx.clearRect(0, 0, this.graph_width, this.graph_height);\n\t\t}\n\n    };\n    "],[0,"\n\n\n "]],"start1":1115,"start2":1115,"length1":2181,"length2":8},{"diffs":[[0,"out,"],[-1,"fdMapHandler.clear"],[1,"\n            function () {\n                ctx.clearRect(0, 0, map.graph_width, map.graph_height);\n\t\t    }"],[0,",\n  "]],"start1":5674,"start2":5674,"length1":26,"length2":114}]],"length":11081,"saved":false}
{"ts":1360776247283,"patch":[[{"diffs":[[0,"unction("],[-1,""],[0,""],[1,"map, "],[0,"node, p)"]],"start1":5808,"start2":5808,"length1":16,"length2":21},{"diffs":[[0,"p));\n\n\t\t    "],[-1,"this."],[0,""],[1,""],[0,"ctx.save();\n"]],"start1":6139,"start2":6139,"length1":29,"length2":24},{"diffs":[[0,"dgrad = "],[-1,"this."],[0,""],[1,""],[0,"ctx.crea"]],"start1":6870,"start2":6870,"length1":21,"length2":16},{"diffs":[[0,");\n\n\n\n\t\t    "],[-1,"this."],[0,"ctx.fillStyl"]],"start1":7081,"start2":7081,"length1":29,"length2":24},{"diffs":[[0," radgrad;\n\t\t    "],[-1,"this."],[0,"ctx.fillRect(s.x"]],"start1":7108,"start2":7108,"length1":37,"length2":32},{"diffs":[[0,");\n\n\n\n\t\t    "],[-1,"this."],[0,"ctx.textAlig"]],"start1":7179,"start2":7179,"length1":29,"length2":24},{"diffs":[[0,"eft\";\n\t\t    "],[-1,"this."],[0,"ctx.textBase"]],"start1":7209,"start2":7209,"length1":29,"length2":24},{"diffs":[[0," = \"top\";\n\t\t    "],[-1,"this."],[0,"ctx.font = \"16px"]],"start1":7237,"start2":7237,"length1":37,"length2":32},{"diffs":[[0,"s-serif\";\n\t\t    "],[-1,"this."],[0,"ctx.fillStyle = "]],"start1":7282,"start2":7282,"length1":37,"length2":32},{"diffs":[[0,"000\";\n\t\t    "],[-1,"this."],[0,"ctx.font = \""]],"start1":7319,"start2":7319,"length1":29,"length2":24},{"diffs":[[0,"e.id;\n\t\t    "],[-1,"this."],[0,"ctx.fillText"]],"start1":7451,"start2":7451,"length1":29,"length2":24},{"diffs":[[0," 8);\n\n\t\t    "],[-1,"this."],[0,"ctx.restore("]],"start1":7511,"start2":7511,"length1":29,"length2":24},{"diffs":[[0,");\n\t\t},        \n"],[1,"    "],[0,"        function"]],"start1":7535,"start2":7535,"length1":32,"length2":36}]],"length":11035,"saved":false}
{"ts":1360776296654,"patch":[[{"diffs":[[0,"ut,Graph"],[1,",mapHandler"],[0,";\n\n \n\n\n\n"]],"start1":1106,"start2":1106,"length1":16,"length2":27},{"diffs":[[0,"\t\t    },"],[-1,"\n"],[0,"        "]],"start1":5788,"start2":5788,"length1":17,"length2":16}]],"length":11045,"saved":false}
{"ts":1360776379705,"patch":[[{"diffs":[[0,"            "],[-1,"fdMapHandler."],[0,"ctx.save();\n"]],"start1":5221,"start2":5221,"length1":37,"length2":24},{"diffs":[[0,"            "],[-1,"fdMapHandler."],[0,"ctx.font = \""]],"start1":5245,"start2":5245,"length1":37,"length2":24},{"diffs":[[0,"        "],[-1,"fdMapHandler."],[0,"ctx.rest"]],"start1":5371,"start2":5371,"length1":29,"length2":16}]],"length":11006,"saved":false}
